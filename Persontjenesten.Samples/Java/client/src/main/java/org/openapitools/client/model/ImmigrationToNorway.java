/*
 * Persontjenesten API - ET
 * The Person API provides information on norwegian citizens for the norwegian public health sector, and is maintained by [Norsk helsenett](https://www.nhn.no/).  An API changelog is available [here](../static/changelog/index.html).  For more documentation and a complete integration guide, see the [NHN developer portal](https://utviklerportal.nhn.no/informasjonstjenester/persontjenesten/). 
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information on the country and city of residence of the person before immigration to norway.  Country codes are given in ISO 3166-1 alfa 3  &lt;br&gt;FREG: InnflyttingTilNorge
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-30T07:50:48.244395087Z[Etc/UTC]", comments = "Generator version: 7.7.0-SNAPSHOT")
public class ImmigrationToNorway {
  public static final String SERIALIZED_NAME_REGISTERED_AT = "registeredAt";
  @SerializedName(SERIALIZED_NAME_REGISTERED_AT)
  private OffsetDateTime registeredAt;

  public static final String SERIALIZED_NAME_IS_VALID = "isValid";
  @SerializedName(SERIALIZED_NAME_IS_VALID)
  private Boolean isValid;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private String reason;

  public static final String SERIALIZED_NAME_VALID_FROM = "validFrom";
  @SerializedName(SERIALIZED_NAME_VALID_FROM)
  private OffsetDateTime validFrom;

  public static final String SERIALIZED_NAME_VALID_TO = "validTo";
  @SerializedName(SERIALIZED_NAME_VALID_TO)
  private OffsetDateTime validTo;

  public static final String SERIALIZED_NAME_IMMIGRATED_FROM_COUNTRY = "immigratedFromCountry";
  @SerializedName(SERIALIZED_NAME_IMMIGRATED_FROM_COUNTRY)
  private String immigratedFromCountry;

  public static final String SERIALIZED_NAME_IMMIGRATED_FROM_CITY = "immigratedFromCity";
  @SerializedName(SERIALIZED_NAME_IMMIGRATED_FROM_CITY)
  private String immigratedFromCity;

  public ImmigrationToNorway() {
  }

  public ImmigrationToNorway registeredAt(OffsetDateTime registeredAt) {
    this.registeredAt = registeredAt;
    return this;
  }

   /**
   * &lt;br&gt;FREG: Ajourholdstidspunkt
   * @return registeredAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getRegisteredAt() {
    return registeredAt;
  }

  public void setRegisteredAt(OffsetDateTime registeredAt) {
    this.registeredAt = registeredAt;
  }


  public ImmigrationToNorway isValid(Boolean isValid) {
    this.isValid = isValid;
    return this;
  }

   /**
   * &lt;br&gt;FREG: ErGjeldende
   * @return isValid
  **/
  @javax.annotation.Nullable
  public Boolean getIsValid() {
    return isValid;
  }

  public void setIsValid(Boolean isValid) {
    this.isValid = isValid;
  }


  public ImmigrationToNorway source(String source) {
    this.source = source;
    return this;
  }

   /**
   * &lt;br&gt;FREG: Kilde
   * @return source
  **/
  @javax.annotation.Nullable
  public String getSource() {
    return source;
  }

  public void setSource(String source) {
    this.source = source;
  }


  public ImmigrationToNorway reason(String reason) {
    this.reason = reason;
    return this;
  }

   /**
   * &lt;br&gt;FREG: Aarsak
   * @return reason
  **/
  @javax.annotation.Nullable
  public String getReason() {
    return reason;
  }

  public void setReason(String reason) {
    this.reason = reason;
  }


  public ImmigrationToNorway validFrom(OffsetDateTime validFrom) {
    this.validFrom = validFrom;
    return this;
  }

   /**
   * &lt;br&gt;FREG: Gyldighetstidspunkt
   * @return validFrom
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getValidFrom() {
    return validFrom;
  }

  public void setValidFrom(OffsetDateTime validFrom) {
    this.validFrom = validFrom;
  }


  public ImmigrationToNorway validTo(OffsetDateTime validTo) {
    this.validTo = validTo;
    return this;
  }

   /**
   * &lt;br&gt;FREG: Opphoerstidspunkt
   * @return validTo
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getValidTo() {
    return validTo;
  }

  public void setValidTo(OffsetDateTime validTo) {
    this.validTo = validTo;
  }


  public ImmigrationToNorway immigratedFromCountry(String immigratedFromCountry) {
    this.immigratedFromCountry = immigratedFromCountry;
    return this;
  }

   /**
   * &lt;br&gt;FREG: Fraflyttingsland
   * @return immigratedFromCountry
  **/
  @javax.annotation.Nullable
  public String getImmigratedFromCountry() {
    return immigratedFromCountry;
  }

  public void setImmigratedFromCountry(String immigratedFromCountry) {
    this.immigratedFromCountry = immigratedFromCountry;
  }


  public ImmigrationToNorway immigratedFromCity(String immigratedFromCity) {
    this.immigratedFromCity = immigratedFromCity;
    return this;
  }

   /**
   * &lt;br&gt;FREG: FraflyttingsstedIUtland
   * @return immigratedFromCity
  **/
  @javax.annotation.Nullable
  public String getImmigratedFromCity() {
    return immigratedFromCity;
  }

  public void setImmigratedFromCity(String immigratedFromCity) {
    this.immigratedFromCity = immigratedFromCity;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImmigrationToNorway immigrationToNorway = (ImmigrationToNorway) o;
    return Objects.equals(this.registeredAt, immigrationToNorway.registeredAt) &&
        Objects.equals(this.isValid, immigrationToNorway.isValid) &&
        Objects.equals(this.source, immigrationToNorway.source) &&
        Objects.equals(this.reason, immigrationToNorway.reason) &&
        Objects.equals(this.validFrom, immigrationToNorway.validFrom) &&
        Objects.equals(this.validTo, immigrationToNorway.validTo) &&
        Objects.equals(this.immigratedFromCountry, immigrationToNorway.immigratedFromCountry) &&
        Objects.equals(this.immigratedFromCity, immigrationToNorway.immigratedFromCity);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(registeredAt, isValid, source, reason, validFrom, validTo, immigratedFromCountry, immigratedFromCity);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImmigrationToNorway {\n");
    sb.append("    registeredAt: ").append(toIndentedString(registeredAt)).append("\n");
    sb.append("    isValid: ").append(toIndentedString(isValid)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    validFrom: ").append(toIndentedString(validFrom)).append("\n");
    sb.append("    validTo: ").append(toIndentedString(validTo)).append("\n");
    sb.append("    immigratedFromCountry: ").append(toIndentedString(immigratedFromCountry)).append("\n");
    sb.append("    immigratedFromCity: ").append(toIndentedString(immigratedFromCity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("registeredAt");
    openapiFields.add("isValid");
    openapiFields.add("source");
    openapiFields.add("reason");
    openapiFields.add("validFrom");
    openapiFields.add("validTo");
    openapiFields.add("immigratedFromCountry");
    openapiFields.add("immigratedFromCity");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ImmigrationToNorway
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ImmigrationToNorway.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImmigrationToNorway is not found in the empty JSON string", ImmigrationToNorway.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ImmigrationToNorway.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ImmigrationToNorway` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) && !jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      if ((jsonObj.get("reason") != null && !jsonObj.get("reason").isJsonNull()) && !jsonObj.get("reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason").toString()));
      }
      if ((jsonObj.get("immigratedFromCountry") != null && !jsonObj.get("immigratedFromCountry").isJsonNull()) && !jsonObj.get("immigratedFromCountry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `immigratedFromCountry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("immigratedFromCountry").toString()));
      }
      if ((jsonObj.get("immigratedFromCity") != null && !jsonObj.get("immigratedFromCity").isJsonNull()) && !jsonObj.get("immigratedFromCity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `immigratedFromCity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("immigratedFromCity").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImmigrationToNorway.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImmigrationToNorway' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImmigrationToNorway> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImmigrationToNorway.class));

       return (TypeAdapter<T>) new TypeAdapter<ImmigrationToNorway>() {
           @Override
           public void write(JsonWriter out, ImmigrationToNorway value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ImmigrationToNorway read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ImmigrationToNorway given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ImmigrationToNorway
  * @throws IOException if the JSON string is invalid with respect to ImmigrationToNorway
  */
  public static ImmigrationToNorway fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImmigrationToNorway.class);
  }

 /**
  * Convert an instance of ImmigrationToNorway to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

