/*
 * Persontjenesten API - ET
 * The Person API provides information on norwegian citizens for the norwegian public health sector, and is maintained by [Norsk helsenett](https://www.nhn.no/).  An API changelog is available [here](../static/changelog/index.html).  For more documentation and a complete integration guide, see the [NHN developer portal](https://utviklerportal.nhn.no/informasjonstjenester/persontjenesten/). 
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.EventDocument;
import org.openapitools.client.model.EventDocumentSearchResult;
import org.openapitools.client.model.EventType;
import org.openapitools.client.model.ProblemDetails;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EventWithLegalBasisApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EventWithLegalBasisApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EventWithLegalBasisApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiLegalBasisEventLatestGet
     * @param apiVersion The requested API version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event document returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Event document not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden, invalid scope </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiLegalBasisEventLatestGetCall(String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/legal-basis/event/latest";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarHeaderParams.put("api-version", localVarApiClient.parameterToString(apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HelseID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiLegalBasisEventLatestGetValidateBeforeCall(String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling apiLegalBasisEventLatestGet(Async)");
        }

        return apiLegalBasisEventLatestGetCall(apiVersion, _callback);

    }

    /**
     * Get the latest event. Returns a search result with the latest available event document
     * &lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadWithLegalBasis
     * @param apiVersion The requested API version (required)
     * @return EventDocument
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event document returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Event document not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden, invalid scope </td><td>  -  </td></tr>
     </table>
     */
    public EventDocument apiLegalBasisEventLatestGet(String apiVersion) throws ApiException {
        ApiResponse<EventDocument> localVarResp = apiLegalBasisEventLatestGetWithHttpInfo(apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get the latest event. Returns a search result with the latest available event document
     * &lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadWithLegalBasis
     * @param apiVersion The requested API version (required)
     * @return ApiResponse&lt;EventDocument&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event document returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Event document not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden, invalid scope </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventDocument> apiLegalBasisEventLatestGetWithHttpInfo(String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = apiLegalBasisEventLatestGetValidateBeforeCall(apiVersion, null);
        Type localVarReturnType = new TypeToken<EventDocument>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the latest event. Returns a search result with the latest available event document (asynchronously)
     * &lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadWithLegalBasis
     * @param apiVersion The requested API version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event document returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Event document not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden, invalid scope </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiLegalBasisEventLatestGetAsync(String apiVersion, final ApiCallback<EventDocument> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiLegalBasisEventLatestGetValidateBeforeCall(apiVersion, _callback);
        Type localVarReturnType = new TypeToken<EventDocument>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventWithLegalBasis
     * @param apiVersion The requested API version (required)
     * @param sequenceNumber The lowest sequence number that should be included in the result (optional)
     * @param eventTypes Which event types that should be included in the result.              All event types will be returned if no event types are specified (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event document returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Event not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden, invalid scope </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventWithLegalBasisCall(String apiVersion, Long sequenceNumber, List<EventType> eventTypes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/legal-basis/event";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sequenceNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sequenceNumber", sequenceNumber));
        }

        if (eventTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "eventTypes", eventTypes));
        }

        if (apiVersion != null) {
            localVarHeaderParams.put("api-version", localVarApiClient.parameterToString(apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HelseID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventWithLegalBasisValidateBeforeCall(String apiVersion, Long sequenceNumber, List<EventType> eventTypes, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling eventWithLegalBasis(Async)");
        }

        return eventWithLegalBasisCall(apiVersion, sequenceNumber, eventTypes, _callback);

    }

    /**
     * Get list of specific events by filter options. Returns a search result with max 1000 event documents  starting with the specified sequenceNumber
     * Get a list of up to 1000 events from a given sequenceNumber as a starting point. The result list may be  further filtered by specifying which event types that should be included in the result.  The result list will contain the event for the given sequenceNumber if it exists.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadWithLegalBasis
     * @param apiVersion The requested API version (required)
     * @param sequenceNumber The lowest sequence number that should be included in the result (optional)
     * @param eventTypes Which event types that should be included in the result.              All event types will be returned if no event types are specified (optional)
     * @return EventDocumentSearchResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event document returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Event not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden, invalid scope </td><td>  -  </td></tr>
     </table>
     */
    public EventDocumentSearchResult eventWithLegalBasis(String apiVersion, Long sequenceNumber, List<EventType> eventTypes) throws ApiException {
        ApiResponse<EventDocumentSearchResult> localVarResp = eventWithLegalBasisWithHttpInfo(apiVersion, sequenceNumber, eventTypes);
        return localVarResp.getData();
    }

    /**
     * Get list of specific events by filter options. Returns a search result with max 1000 event documents  starting with the specified sequenceNumber
     * Get a list of up to 1000 events from a given sequenceNumber as a starting point. The result list may be  further filtered by specifying which event types that should be included in the result.  The result list will contain the event for the given sequenceNumber if it exists.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadWithLegalBasis
     * @param apiVersion The requested API version (required)
     * @param sequenceNumber The lowest sequence number that should be included in the result (optional)
     * @param eventTypes Which event types that should be included in the result.              All event types will be returned if no event types are specified (optional)
     * @return ApiResponse&lt;EventDocumentSearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event document returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Event not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden, invalid scope </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventDocumentSearchResult> eventWithLegalBasisWithHttpInfo(String apiVersion, Long sequenceNumber, List<EventType> eventTypes) throws ApiException {
        okhttp3.Call localVarCall = eventWithLegalBasisValidateBeforeCall(apiVersion, sequenceNumber, eventTypes, null);
        Type localVarReturnType = new TypeToken<EventDocumentSearchResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get list of specific events by filter options. Returns a search result with max 1000 event documents  starting with the specified sequenceNumber (asynchronously)
     * Get a list of up to 1000 events from a given sequenceNumber as a starting point. The result list may be  further filtered by specifying which event types that should be included in the result.  The result list will contain the event for the given sequenceNumber if it exists.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadWithLegalBasis
     * @param apiVersion The requested API version (required)
     * @param sequenceNumber The lowest sequence number that should be included in the result (optional)
     * @param eventTypes Which event types that should be included in the result.              All event types will be returned if no event types are specified (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event document returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Event not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden, invalid scope </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventWithLegalBasisAsync(String apiVersion, Long sequenceNumber, List<EventType> eventTypes, final ApiCallback<EventDocumentSearchResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventWithLegalBasisValidateBeforeCall(apiVersion, sequenceNumber, eventTypes, _callback);
        Type localVarReturnType = new TypeToken<EventDocumentSearchResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
