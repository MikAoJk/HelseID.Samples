/*
 * Persontjenesten API - ET
 * The Person API provides information on norwegian citizens for the norwegian public health sector, and is maintained by [Norsk helsenett](https://www.nhn.no/).  An API changelog is available [here](../static/changelog/index.html).  For more documentation and a complete integration guide, see the [NHN developer portal](https://utviklerportal.nhn.no/informasjonstjenester/persontjenesten/). 
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CadastralAddressCadastralNumber;
import org.openapitools.client.model.CadastralAddressCity;
import org.openapitools.client.model.SeparatelyOccupiedUnitType;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;br&gt;FREG: Matrikkeladresse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-30T07:50:48.244395087Z[Etc/UTC]", comments = "Generator version: 7.7.0-SNAPSHOT")
public class PresentAddressCadastralAddress {
  public static final String SERIALIZED_NAME_SEPARATELY_OCCUPIED_UNIT_NUMBER = "separatelyOccupiedUnitNumber";
  @SerializedName(SERIALIZED_NAME_SEPARATELY_OCCUPIED_UNIT_NUMBER)
  private String separatelyOccupiedUnitNumber;

  public static final String SERIALIZED_NAME_SEPARATELY_OCCUPIED_UNIT_TYPE = "separatelyOccupiedUnitType";
  @SerializedName(SERIALIZED_NAME_SEPARATELY_OCCUPIED_UNIT_TYPE)
  private SeparatelyOccupiedUnitType separatelyOccupiedUnitType;

  public static final String SERIALIZED_NAME_CADASTRAL_NUMBER = "cadastralNumber";
  @SerializedName(SERIALIZED_NAME_CADASTRAL_NUMBER)
  private CadastralAddressCadastralNumber cadastralNumber;

  public static final String SERIALIZED_NAME_SUB_NUMBER = "subNumber";
  @SerializedName(SERIALIZED_NAME_SUB_NUMBER)
  private Long subNumber;

  public static final String SERIALIZED_NAME_ADDRESS_ADDITIONAL_NAME = "addressAdditionalName";
  @SerializedName(SERIALIZED_NAME_ADDRESS_ADDITIONAL_NAME)
  private String addressAdditionalName;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private CadastralAddressCity city;

  public static final String SERIALIZED_NAME_CO_ADDRESS_NAME = "coAddressName";
  @SerializedName(SERIALIZED_NAME_CO_ADDRESS_NAME)
  private String coAddressName;

  public PresentAddressCadastralAddress() {
  }

  public PresentAddressCadastralAddress separatelyOccupiedUnitNumber(String separatelyOccupiedUnitNumber) {
    this.separatelyOccupiedUnitNumber = separatelyOccupiedUnitNumber;
    return this;
  }

   /**
   * A letter and four digits that uniquely identifies the  separately occupied unit inside a addressable building  or part of a building  &lt;br&gt;Remarks:   Two first digits represent floor number  Freg: Bruksenhetsnummer
   * @return separatelyOccupiedUnitNumber
  **/
  @javax.annotation.Nullable
  public String getSeparatelyOccupiedUnitNumber() {
    return separatelyOccupiedUnitNumber;
  }

  public void setSeparatelyOccupiedUnitNumber(String separatelyOccupiedUnitNumber) {
    this.separatelyOccupiedUnitNumber = separatelyOccupiedUnitNumber;
  }


  public PresentAddressCadastralAddress separatelyOccupiedUnitType(SeparatelyOccupiedUnitType separatelyOccupiedUnitType) {
    this.separatelyOccupiedUnitType = separatelyOccupiedUnitType;
    return this;
  }

   /**
   * Categorization of occupancy unit type  &lt;br&gt;FREG: Bruksenhetstype
   * @return separatelyOccupiedUnitType
  **/
  @javax.annotation.Nullable
  public SeparatelyOccupiedUnitType getSeparatelyOccupiedUnitType() {
    return separatelyOccupiedUnitType;
  }

  public void setSeparatelyOccupiedUnitType(SeparatelyOccupiedUnitType separatelyOccupiedUnitType) {
    this.separatelyOccupiedUnitType = separatelyOccupiedUnitType;
  }


  public PresentAddressCadastralAddress cadastralNumber(CadastralAddressCadastralNumber cadastralNumber) {
    this.cadastralNumber = cadastralNumber;
    return this;
  }

   /**
   * Get cadastralNumber
   * @return cadastralNumber
  **/
  @javax.annotation.Nullable
  public CadastralAddressCadastralNumber getCadastralNumber() {
    return cadastralNumber;
  }

  public void setCadastralNumber(CadastralAddressCadastralNumber cadastralNumber) {
    this.cadastralNumber = cadastralNumber;
  }


  public PresentAddressCadastralAddress subNumber(Long subNumber) {
    this.subNumber = subNumber;
    return this;
  }

   /**
   * Used with CadastralNumber when a real estate property  is linked to several different addresses  &lt;br&gt;Remarks:   I.e. each building on a farmyard has a sub number  Freg: Undernummer
   * @return subNumber
  **/
  @javax.annotation.Nullable
  public Long getSubNumber() {
    return subNumber;
  }

  public void setSubNumber(Long subNumber) {
    this.subNumber = subNumber;
  }


  public PresentAddressCadastralAddress addressAdditionalName(String addressAdditionalName) {
    this.addressAdditionalName = addressAdditionalName;
    return this;
  }

   /**
   * Inherited farm name (bruksnavn) or name of a institution or building,  used as a part of the official address  &lt;br&gt;FREG: Addressetilleggsnavn
   * @return addressAdditionalName
  **/
  @javax.annotation.Nullable
  public String getAddressAdditionalName() {
    return addressAdditionalName;
  }

  public void setAddressAdditionalName(String addressAdditionalName) {
    this.addressAdditionalName = addressAdditionalName;
  }


  public PresentAddressCadastralAddress city(CadastralAddressCity city) {
    this.city = city;
    return this;
  }

   /**
   * Get city
   * @return city
  **/
  @javax.annotation.Nullable
  public CadastralAddressCity getCity() {
    return city;
  }

  public void setCity(CadastralAddressCity city) {
    this.city = city;
  }


  public PresentAddressCadastralAddress coAddressName(String coAddressName) {
    this.coAddressName = coAddressName;
    return this;
  }

   /**
   * Description of who the recipient is in care of (C/O),  or which recipient in an organization (v/ &#x3D; with, or Att: &#x3D; \&quot;Attention\&quot;)  &lt;br&gt;FREG: CoAdressenavn
   * @return coAddressName
  **/
  @javax.annotation.Nullable
  public String getCoAddressName() {
    return coAddressName;
  }

  public void setCoAddressName(String coAddressName) {
    this.coAddressName = coAddressName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PresentAddressCadastralAddress presentAddressCadastralAddress = (PresentAddressCadastralAddress) o;
    return Objects.equals(this.separatelyOccupiedUnitNumber, presentAddressCadastralAddress.separatelyOccupiedUnitNumber) &&
        Objects.equals(this.separatelyOccupiedUnitType, presentAddressCadastralAddress.separatelyOccupiedUnitType) &&
        Objects.equals(this.cadastralNumber, presentAddressCadastralAddress.cadastralNumber) &&
        Objects.equals(this.subNumber, presentAddressCadastralAddress.subNumber) &&
        Objects.equals(this.addressAdditionalName, presentAddressCadastralAddress.addressAdditionalName) &&
        Objects.equals(this.city, presentAddressCadastralAddress.city) &&
        Objects.equals(this.coAddressName, presentAddressCadastralAddress.coAddressName);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(separatelyOccupiedUnitNumber, separatelyOccupiedUnitType, cadastralNumber, subNumber, addressAdditionalName, city, coAddressName);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PresentAddressCadastralAddress {\n");
    sb.append("    separatelyOccupiedUnitNumber: ").append(toIndentedString(separatelyOccupiedUnitNumber)).append("\n");
    sb.append("    separatelyOccupiedUnitType: ").append(toIndentedString(separatelyOccupiedUnitType)).append("\n");
    sb.append("    cadastralNumber: ").append(toIndentedString(cadastralNumber)).append("\n");
    sb.append("    subNumber: ").append(toIndentedString(subNumber)).append("\n");
    sb.append("    addressAdditionalName: ").append(toIndentedString(addressAdditionalName)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    coAddressName: ").append(toIndentedString(coAddressName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("separatelyOccupiedUnitNumber");
    openapiFields.add("separatelyOccupiedUnitType");
    openapiFields.add("cadastralNumber");
    openapiFields.add("subNumber");
    openapiFields.add("addressAdditionalName");
    openapiFields.add("city");
    openapiFields.add("coAddressName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to PresentAddressCadastralAddress
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PresentAddressCadastralAddress.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PresentAddressCadastralAddress is not found in the empty JSON string", PresentAddressCadastralAddress.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PresentAddressCadastralAddress.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PresentAddressCadastralAddress` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("separatelyOccupiedUnitNumber") != null && !jsonObj.get("separatelyOccupiedUnitNumber").isJsonNull()) && !jsonObj.get("separatelyOccupiedUnitNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `separatelyOccupiedUnitNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("separatelyOccupiedUnitNumber").toString()));
      }
      // validate the optional field `separatelyOccupiedUnitType`
      if (jsonObj.get("separatelyOccupiedUnitType") != null && !jsonObj.get("separatelyOccupiedUnitType").isJsonNull()) {
        SeparatelyOccupiedUnitType.validateJsonElement(jsonObj.get("separatelyOccupiedUnitType"));
      }
      // validate the optional field `cadastralNumber`
      if (jsonObj.get("cadastralNumber") != null && !jsonObj.get("cadastralNumber").isJsonNull()) {
        CadastralAddressCadastralNumber.validateJsonElement(jsonObj.get("cadastralNumber"));
      }
      if ((jsonObj.get("addressAdditionalName") != null && !jsonObj.get("addressAdditionalName").isJsonNull()) && !jsonObj.get("addressAdditionalName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addressAdditionalName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addressAdditionalName").toString()));
      }
      // validate the optional field `city`
      if (jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) {
        CadastralAddressCity.validateJsonElement(jsonObj.get("city"));
      }
      if ((jsonObj.get("coAddressName") != null && !jsonObj.get("coAddressName").isJsonNull()) && !jsonObj.get("coAddressName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `coAddressName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("coAddressName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PresentAddressCadastralAddress.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PresentAddressCadastralAddress' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PresentAddressCadastralAddress> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PresentAddressCadastralAddress.class));

       return (TypeAdapter<T>) new TypeAdapter<PresentAddressCadastralAddress>() {
           @Override
           public void write(JsonWriter out, PresentAddressCadastralAddress value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PresentAddressCadastralAddress read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PresentAddressCadastralAddress given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PresentAddressCadastralAddress
  * @throws IOException if the JSON string is invalid with respect to PresentAddressCadastralAddress
  */
  public static PresentAddressCadastralAddress fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PresentAddressCadastralAddress.class);
  }

 /**
  * Convert an instance of PresentAddressCadastralAddress to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

