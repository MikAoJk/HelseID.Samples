/*
 * Persontjenesten API - ET
 * The Person API provides information on norwegian citizens for the norwegian public health sector, and is maintained by [Norsk helsenett](https://www.nhn.no/).  An API changelog is available [here](../static/changelog/index.html).  For more documentation and a complete integration guide, see the [NHN developer portal](https://utviklerportal.nhn.no/informasjonstjenester/persontjenesten/). 
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CadastralAddressCity;
import org.openapitools.client.model.SeparatelyOccupiedUnitType;
import org.openapitools.client.model.StreetAddressAddressNumber;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The street address  &lt;br&gt;Remarks:   May be missing, only one of the address elements are used. See ResidentialAddress  Freg: Vegadresse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-30T07:50:48.244395087Z[Etc/UTC]", comments = "Generator version: 7.7.0-SNAPSHOT")
public class ResidentialAddressStreetAddress {
  public static final String SERIALIZED_NAME_MUNICIPALITY_NUMBER = "municipalityNumber";
  @SerializedName(SERIALIZED_NAME_MUNICIPALITY_NUMBER)
  private String municipalityNumber;

  public static final String SERIALIZED_NAME_MUNICIPALITY_NAME = "municipalityName";
  @SerializedName(SERIALIZED_NAME_MUNICIPALITY_NAME)
  private String municipalityName;

  public static final String SERIALIZED_NAME_COUNTY_NUMBER = "countyNumber";
  @SerializedName(SERIALIZED_NAME_COUNTY_NUMBER)
  private String countyNumber;

  public static final String SERIALIZED_NAME_COUNTY_NAME = "countyName";
  @SerializedName(SERIALIZED_NAME_COUNTY_NAME)
  private String countyName;

  public static final String SERIALIZED_NAME_SEPARATELY_OCCUPIED_UNIT_NUMBER = "separatelyOccupiedUnitNumber";
  @SerializedName(SERIALIZED_NAME_SEPARATELY_OCCUPIED_UNIT_NUMBER)
  private String separatelyOccupiedUnitNumber;

  public static final String SERIALIZED_NAME_SEPARATELY_OCCUPIED_UNIT_TYPE = "separatelyOccupiedUnitType";
  @SerializedName(SERIALIZED_NAME_SEPARATELY_OCCUPIED_UNIT_TYPE)
  private SeparatelyOccupiedUnitType separatelyOccupiedUnitType;

  public static final String SERIALIZED_NAME_ADDRESS_NAME = "addressName";
  @SerializedName(SERIALIZED_NAME_ADDRESS_NAME)
  private String addressName;

  public static final String SERIALIZED_NAME_ADDRESS_NUMBER = "addressNumber";
  @SerializedName(SERIALIZED_NAME_ADDRESS_NUMBER)
  private StreetAddressAddressNumber addressNumber;

  public static final String SERIALIZED_NAME_ADDRESS_CODE = "addressCode";
  @SerializedName(SERIALIZED_NAME_ADDRESS_CODE)
  private String addressCode;

  public static final String SERIALIZED_NAME_ADDRESS_ADDITIONAL_NAME = "addressAdditionalName";
  @SerializedName(SERIALIZED_NAME_ADDRESS_ADDITIONAL_NAME)
  private String addressAdditionalName;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private CadastralAddressCity city;

  public static final String SERIALIZED_NAME_CO_ADDRESS_NAME = "coAddressName";
  @SerializedName(SERIALIZED_NAME_CO_ADDRESS_NAME)
  private String coAddressName;

  public ResidentialAddressStreetAddress() {
  }

  public ResidentialAddressStreetAddress municipalityNumber(String municipalityNumber) {
    this.municipalityNumber = municipalityNumber;
    return this;
  }

   /**
   * A four digit code identifying a municipality or municipality-like area.  Municipalities are defined by SSB in classification 131.  !:https://www.ssb.no/klass/klassifikasjoner/131&lt;br&gt;FREG: Kommunenummer
   * @return municipalityNumber
  **/
  @javax.annotation.Nullable
  public String getMunicipalityNumber() {
    return municipalityNumber;
  }

  public void setMunicipalityNumber(String municipalityNumber) {
    this.municipalityNumber = municipalityNumber;
  }


  public ResidentialAddressStreetAddress municipalityName(String municipalityName) {
    this.municipalityName = municipalityName;
    return this;
  }

   /**
   * The name of the municipality. Some municipalities also include names in Sámi languages.  &lt;br&gt;SSB: Kommunenavn
   * @return municipalityName
  **/
  @javax.annotation.Nullable
  public String getMunicipalityName() {
    return municipalityName;
  }

  public void setMunicipalityName(String municipalityName) {
    this.municipalityName = municipalityName;
  }


  public ResidentialAddressStreetAddress countyNumber(String countyNumber) {
    this.countyNumber = countyNumber;
    return this;
  }

   /**
   * A two digit code identifying a county.  Counties are defined by SSB in classification 104.  !:https://www.ssb.no/klass/klassifikasjoner/104&lt;br&gt;SSB: Fylkesnummer
   * @return countyNumber
  **/
  @javax.annotation.Nullable
  public String getCountyNumber() {
    return countyNumber;
  }

  public void setCountyNumber(String countyNumber) {
    this.countyNumber = countyNumber;
  }


  public ResidentialAddressStreetAddress countyName(String countyName) {
    this.countyName = countyName;
    return this;
  }

   /**
   * The name of the county. Some counties also include names in Sámi languages.  &lt;br&gt;SSB: Fylkesnavn
   * @return countyName
  **/
  @javax.annotation.Nullable
  public String getCountyName() {
    return countyName;
  }

  public void setCountyName(String countyName) {
    this.countyName = countyName;
  }


  public ResidentialAddressStreetAddress separatelyOccupiedUnitNumber(String separatelyOccupiedUnitNumber) {
    this.separatelyOccupiedUnitNumber = separatelyOccupiedUnitNumber;
    return this;
  }

   /**
   * A letter and four digits that uniquely identifies the  sperately occupied unit inside a addressable building  or part of a building  &lt;br&gt;Remarks:   Two first digits represent floor number  Freg: Bruksenhetsnummer
   * @return separatelyOccupiedUnitNumber
  **/
  @javax.annotation.Nullable
  public String getSeparatelyOccupiedUnitNumber() {
    return separatelyOccupiedUnitNumber;
  }

  public void setSeparatelyOccupiedUnitNumber(String separatelyOccupiedUnitNumber) {
    this.separatelyOccupiedUnitNumber = separatelyOccupiedUnitNumber;
  }


  public ResidentialAddressStreetAddress separatelyOccupiedUnitType(SeparatelyOccupiedUnitType separatelyOccupiedUnitType) {
    this.separatelyOccupiedUnitType = separatelyOccupiedUnitType;
    return this;
  }

   /**
   * Categorization of occupancy unit type  &lt;br&gt;FREG: Bruksenhetstype
   * @return separatelyOccupiedUnitType
  **/
  @javax.annotation.Nullable
  public SeparatelyOccupiedUnitType getSeparatelyOccupiedUnitType() {
    return separatelyOccupiedUnitType;
  }

  public void setSeparatelyOccupiedUnitType(SeparatelyOccupiedUnitType separatelyOccupiedUnitType) {
    this.separatelyOccupiedUnitType = separatelyOccupiedUnitType;
  }


  public ResidentialAddressStreetAddress addressName(String addressName) {
    this.addressName = addressName;
    return this;
  }

   /**
   * Name of a street, road, path, place or area  as registered in the cadastral of a municipality  &lt;br&gt;Remarks:   Does not contain street address number (housing number and lettering)  Freg: Adressenavn
   * @return addressName
  **/
  @javax.annotation.Nullable
  public String getAddressName() {
    return addressName;
  }

  public void setAddressName(String addressName) {
    this.addressName = addressName;
  }


  public ResidentialAddressStreetAddress addressNumber(StreetAddressAddressNumber addressNumber) {
    this.addressNumber = addressNumber;
    return this;
  }

   /**
   * Get addressNumber
   * @return addressNumber
  **/
  @javax.annotation.Nullable
  public StreetAddressAddressNumber getAddressNumber() {
    return addressNumber;
  }

  public void setAddressNumber(StreetAddressAddressNumber addressNumber) {
    this.addressNumber = addressNumber;
  }


  public ResidentialAddressStreetAddress addressCode(String addressCode) {
    this.addressCode = addressCode;
    return this;
  }

   /**
   * Number that uniquely identifies an addressable  street, road, path, place or area  &lt;br&gt;Remarks:   Known as StreetCode (\&quot;gatekode\&quot;) in DSF  Freg: Adressekode
   * @return addressCode
  **/
  @javax.annotation.Nullable
  public String getAddressCode() {
    return addressCode;
  }

  public void setAddressCode(String addressCode) {
    this.addressCode = addressCode;
  }


  public ResidentialAddressStreetAddress addressAdditionalName(String addressAdditionalName) {
    this.addressAdditionalName = addressAdditionalName;
    return this;
  }

   /**
   * Inherited farm name (bruksnavn) or name of a institution or building,  used as a part of the official address  &lt;br&gt;FREG: Addressetilleggsnavn
   * @return addressAdditionalName
  **/
  @javax.annotation.Nullable
  public String getAddressAdditionalName() {
    return addressAdditionalName;
  }

  public void setAddressAdditionalName(String addressAdditionalName) {
    this.addressAdditionalName = addressAdditionalName;
  }


  public ResidentialAddressStreetAddress city(CadastralAddressCity city) {
    this.city = city;
    return this;
  }

   /**
   * Get city
   * @return city
  **/
  @javax.annotation.Nullable
  public CadastralAddressCity getCity() {
    return city;
  }

  public void setCity(CadastralAddressCity city) {
    this.city = city;
  }


  public ResidentialAddressStreetAddress coAddressName(String coAddressName) {
    this.coAddressName = coAddressName;
    return this;
  }

   /**
   * Description of who the recipient is in care of (C/O),  or which recipient in an organization (v/ &#x3D; with, or Att: &#x3D; \&quot;Attention\&quot;)  &lt;br&gt;FREG: CoAdressenavn
   * @return coAddressName
  **/
  @javax.annotation.Nullable
  public String getCoAddressName() {
    return coAddressName;
  }

  public void setCoAddressName(String coAddressName) {
    this.coAddressName = coAddressName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResidentialAddressStreetAddress residentialAddressStreetAddress = (ResidentialAddressStreetAddress) o;
    return Objects.equals(this.municipalityNumber, residentialAddressStreetAddress.municipalityNumber) &&
        Objects.equals(this.municipalityName, residentialAddressStreetAddress.municipalityName) &&
        Objects.equals(this.countyNumber, residentialAddressStreetAddress.countyNumber) &&
        Objects.equals(this.countyName, residentialAddressStreetAddress.countyName) &&
        Objects.equals(this.separatelyOccupiedUnitNumber, residentialAddressStreetAddress.separatelyOccupiedUnitNumber) &&
        Objects.equals(this.separatelyOccupiedUnitType, residentialAddressStreetAddress.separatelyOccupiedUnitType) &&
        Objects.equals(this.addressName, residentialAddressStreetAddress.addressName) &&
        Objects.equals(this.addressNumber, residentialAddressStreetAddress.addressNumber) &&
        Objects.equals(this.addressCode, residentialAddressStreetAddress.addressCode) &&
        Objects.equals(this.addressAdditionalName, residentialAddressStreetAddress.addressAdditionalName) &&
        Objects.equals(this.city, residentialAddressStreetAddress.city) &&
        Objects.equals(this.coAddressName, residentialAddressStreetAddress.coAddressName);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(municipalityNumber, municipalityName, countyNumber, countyName, separatelyOccupiedUnitNumber, separatelyOccupiedUnitType, addressName, addressNumber, addressCode, addressAdditionalName, city, coAddressName);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResidentialAddressStreetAddress {\n");
    sb.append("    municipalityNumber: ").append(toIndentedString(municipalityNumber)).append("\n");
    sb.append("    municipalityName: ").append(toIndentedString(municipalityName)).append("\n");
    sb.append("    countyNumber: ").append(toIndentedString(countyNumber)).append("\n");
    sb.append("    countyName: ").append(toIndentedString(countyName)).append("\n");
    sb.append("    separatelyOccupiedUnitNumber: ").append(toIndentedString(separatelyOccupiedUnitNumber)).append("\n");
    sb.append("    separatelyOccupiedUnitType: ").append(toIndentedString(separatelyOccupiedUnitType)).append("\n");
    sb.append("    addressName: ").append(toIndentedString(addressName)).append("\n");
    sb.append("    addressNumber: ").append(toIndentedString(addressNumber)).append("\n");
    sb.append("    addressCode: ").append(toIndentedString(addressCode)).append("\n");
    sb.append("    addressAdditionalName: ").append(toIndentedString(addressAdditionalName)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    coAddressName: ").append(toIndentedString(coAddressName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("municipalityNumber");
    openapiFields.add("municipalityName");
    openapiFields.add("countyNumber");
    openapiFields.add("countyName");
    openapiFields.add("separatelyOccupiedUnitNumber");
    openapiFields.add("separatelyOccupiedUnitType");
    openapiFields.add("addressName");
    openapiFields.add("addressNumber");
    openapiFields.add("addressCode");
    openapiFields.add("addressAdditionalName");
    openapiFields.add("city");
    openapiFields.add("coAddressName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ResidentialAddressStreetAddress
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ResidentialAddressStreetAddress.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ResidentialAddressStreetAddress is not found in the empty JSON string", ResidentialAddressStreetAddress.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ResidentialAddressStreetAddress.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ResidentialAddressStreetAddress` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("municipalityNumber") != null && !jsonObj.get("municipalityNumber").isJsonNull()) && !jsonObj.get("municipalityNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `municipalityNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("municipalityNumber").toString()));
      }
      if ((jsonObj.get("municipalityName") != null && !jsonObj.get("municipalityName").isJsonNull()) && !jsonObj.get("municipalityName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `municipalityName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("municipalityName").toString()));
      }
      if ((jsonObj.get("countyNumber") != null && !jsonObj.get("countyNumber").isJsonNull()) && !jsonObj.get("countyNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countyNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countyNumber").toString()));
      }
      if ((jsonObj.get("countyName") != null && !jsonObj.get("countyName").isJsonNull()) && !jsonObj.get("countyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countyName").toString()));
      }
      if ((jsonObj.get("separatelyOccupiedUnitNumber") != null && !jsonObj.get("separatelyOccupiedUnitNumber").isJsonNull()) && !jsonObj.get("separatelyOccupiedUnitNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `separatelyOccupiedUnitNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("separatelyOccupiedUnitNumber").toString()));
      }
      // validate the optional field `separatelyOccupiedUnitType`
      if (jsonObj.get("separatelyOccupiedUnitType") != null && !jsonObj.get("separatelyOccupiedUnitType").isJsonNull()) {
        SeparatelyOccupiedUnitType.validateJsonElement(jsonObj.get("separatelyOccupiedUnitType"));
      }
      if ((jsonObj.get("addressName") != null && !jsonObj.get("addressName").isJsonNull()) && !jsonObj.get("addressName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addressName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addressName").toString()));
      }
      // validate the optional field `addressNumber`
      if (jsonObj.get("addressNumber") != null && !jsonObj.get("addressNumber").isJsonNull()) {
        StreetAddressAddressNumber.validateJsonElement(jsonObj.get("addressNumber"));
      }
      if ((jsonObj.get("addressCode") != null && !jsonObj.get("addressCode").isJsonNull()) && !jsonObj.get("addressCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addressCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addressCode").toString()));
      }
      if ((jsonObj.get("addressAdditionalName") != null && !jsonObj.get("addressAdditionalName").isJsonNull()) && !jsonObj.get("addressAdditionalName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addressAdditionalName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addressAdditionalName").toString()));
      }
      // validate the optional field `city`
      if (jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) {
        CadastralAddressCity.validateJsonElement(jsonObj.get("city"));
      }
      if ((jsonObj.get("coAddressName") != null && !jsonObj.get("coAddressName").isJsonNull()) && !jsonObj.get("coAddressName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `coAddressName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("coAddressName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ResidentialAddressStreetAddress.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ResidentialAddressStreetAddress' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ResidentialAddressStreetAddress> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ResidentialAddressStreetAddress.class));

       return (TypeAdapter<T>) new TypeAdapter<ResidentialAddressStreetAddress>() {
           @Override
           public void write(JsonWriter out, ResidentialAddressStreetAddress value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ResidentialAddressStreetAddress read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ResidentialAddressStreetAddress given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ResidentialAddressStreetAddress
  * @throws IOException if the JSON string is invalid with respect to ResidentialAddressStreetAddress
  */
  public static ResidentialAddressStreetAddress fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ResidentialAddressStreetAddress.class);
  }

 /**
  * Convert an instance of ResidentialAddressStreetAddress to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

