/*
 * Persontjenesten API - ET
 * The Person API provides information on norwegian citizens for the norwegian public health sector, and is maintained by [Norsk helsenett](https://www.nhn.no/).  An API changelog is available [here](../static/changelog/index.html).  For more documentation and a complete integration guide, see the [NHN developer portal](https://utviklerportal.nhn.no/informasjonstjenester/persontjenesten/). 
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ParentalResponsibilityResponsibleWithoutIdentifier;
import org.openapitools.client.model.ParentalResponsibilitySubjectOfResponsibilityWithoutIdentifier;
import org.openapitools.client.model.ParentalResponsibilityType;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;br&gt;FREG: Foreldreansvar
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-30T07:50:48.244395087Z[Etc/UTC]", comments = "Generator version: 7.7.0-SNAPSHOT")
public class ParentalResponsibility {
  public static final String SERIALIZED_NAME_REGISTERED_AT = "registeredAt";
  @SerializedName(SERIALIZED_NAME_REGISTERED_AT)
  private OffsetDateTime registeredAt;

  public static final String SERIALIZED_NAME_IS_VALID = "isValid";
  @SerializedName(SERIALIZED_NAME_IS_VALID)
  private Boolean isValid;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private String reason;

  public static final String SERIALIZED_NAME_VALID_FROM = "validFrom";
  @SerializedName(SERIALIZED_NAME_VALID_FROM)
  private OffsetDateTime validFrom;

  public static final String SERIALIZED_NAME_VALID_TO = "validTo";
  @SerializedName(SERIALIZED_NAME_VALID_TO)
  private OffsetDateTime validTo;

  public static final String SERIALIZED_NAME_RESPONSIBILITY_TYPE = "responsibilityType";
  @SerializedName(SERIALIZED_NAME_RESPONSIBILITY_TYPE)
  private ParentalResponsibilityType responsibilityType;

  public static final String SERIALIZED_NAME_SUBJECT_OF_RESPONSIBILITY = "subjectOfResponsibility";
  @SerializedName(SERIALIZED_NAME_SUBJECT_OF_RESPONSIBILITY)
  private String subjectOfResponsibility;

  public static final String SERIALIZED_NAME_RESPONSIBLE = "responsible";
  @SerializedName(SERIALIZED_NAME_RESPONSIBLE)
  private String responsible;

  public static final String SERIALIZED_NAME_RESPONSIBLE_ORGANIZATION = "responsibleOrganization";
  @SerializedName(SERIALIZED_NAME_RESPONSIBLE_ORGANIZATION)
  private String responsibleOrganization;

  public static final String SERIALIZED_NAME_RESPONSIBLE_WITHOUT_IDENTIFIER = "responsibleWithoutIdentifier";
  @SerializedName(SERIALIZED_NAME_RESPONSIBLE_WITHOUT_IDENTIFIER)
  private ParentalResponsibilityResponsibleWithoutIdentifier responsibleWithoutIdentifier;

  public static final String SERIALIZED_NAME_SUBJECT_OF_RESPONSIBILITY_WITHOUT_IDENTIFIER = "subjectOfResponsibilityWithoutIdentifier";
  @SerializedName(SERIALIZED_NAME_SUBJECT_OF_RESPONSIBILITY_WITHOUT_IDENTIFIER)
  private ParentalResponsibilitySubjectOfResponsibilityWithoutIdentifier subjectOfResponsibilityWithoutIdentifier;

  public ParentalResponsibility() {
  }

  public ParentalResponsibility registeredAt(OffsetDateTime registeredAt) {
    this.registeredAt = registeredAt;
    return this;
  }

   /**
   * &lt;br&gt;FREG: Ajourholdstidspunkt
   * @return registeredAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getRegisteredAt() {
    return registeredAt;
  }

  public void setRegisteredAt(OffsetDateTime registeredAt) {
    this.registeredAt = registeredAt;
  }


  public ParentalResponsibility isValid(Boolean isValid) {
    this.isValid = isValid;
    return this;
  }

   /**
   * &lt;br&gt;FREG: ErGjeldende
   * @return isValid
  **/
  @javax.annotation.Nullable
  public Boolean getIsValid() {
    return isValid;
  }

  public void setIsValid(Boolean isValid) {
    this.isValid = isValid;
  }


  public ParentalResponsibility source(String source) {
    this.source = source;
    return this;
  }

   /**
   * &lt;br&gt;FREG: Kilde
   * @return source
  **/
  @javax.annotation.Nullable
  public String getSource() {
    return source;
  }

  public void setSource(String source) {
    this.source = source;
  }


  public ParentalResponsibility reason(String reason) {
    this.reason = reason;
    return this;
  }

   /**
   * &lt;br&gt;FREG: Aarsak
   * @return reason
  **/
  @javax.annotation.Nullable
  public String getReason() {
    return reason;
  }

  public void setReason(String reason) {
    this.reason = reason;
  }


  public ParentalResponsibility validFrom(OffsetDateTime validFrom) {
    this.validFrom = validFrom;
    return this;
  }

   /**
   * &lt;br&gt;FREG: Gyldighetstidspunkt
   * @return validFrom
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getValidFrom() {
    return validFrom;
  }

  public void setValidFrom(OffsetDateTime validFrom) {
    this.validFrom = validFrom;
  }


  public ParentalResponsibility validTo(OffsetDateTime validTo) {
    this.validTo = validTo;
    return this;
  }

   /**
   * &lt;br&gt;FREG: Opphoerstidspunkt
   * @return validTo
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getValidTo() {
    return validTo;
  }

  public void setValidTo(OffsetDateTime validTo) {
    this.validTo = validTo;
  }


  public ParentalResponsibility responsibilityType(ParentalResponsibilityType responsibilityType) {
    this.responsibilityType = responsibilityType;
    return this;
  }

   /**
   * &lt;br&gt;FREG: Ansvar
   * @return responsibilityType
  **/
  @javax.annotation.Nullable
  public ParentalResponsibilityType getResponsibilityType() {
    return responsibilityType;
  }

  public void setResponsibilityType(ParentalResponsibilityType responsibilityType) {
    this.responsibilityType = responsibilityType;
  }


  public ParentalResponsibility subjectOfResponsibility(String subjectOfResponsibility) {
    this.subjectOfResponsibility = subjectOfResponsibility;
    return this;
  }

   /**
   * The identification number (nin or d-number) of the subject of responsibility
   * @return subjectOfResponsibility
  **/
  @javax.annotation.Nullable
  public String getSubjectOfResponsibility() {
    return subjectOfResponsibility;
  }

  public void setSubjectOfResponsibility(String subjectOfResponsibility) {
    this.subjectOfResponsibility = subjectOfResponsibility;
  }


  public ParentalResponsibility responsible(String responsible) {
    this.responsible = responsible;
    return this;
  }

   /**
   * The identification number (nin or d-number) of the person responsible for the subject  &lt;br&gt;FREG: Ansvarlig
   * @return responsible
  **/
  @javax.annotation.Nullable
  public String getResponsible() {
    return responsible;
  }

  public void setResponsible(String responsible) {
    this.responsible = responsible;
  }


  public ParentalResponsibility responsibleOrganization(String responsibleOrganization) {
    this.responsibleOrganization = responsibleOrganization;
    return this;
  }

   /**
   * &lt;br&gt;FREG: AnsvarligOrganisasjon
   * @return responsibleOrganization
  **/
  @javax.annotation.Nullable
  public String getResponsibleOrganization() {
    return responsibleOrganization;
  }

  public void setResponsibleOrganization(String responsibleOrganization) {
    this.responsibleOrganization = responsibleOrganization;
  }


  public ParentalResponsibility responsibleWithoutIdentifier(ParentalResponsibilityResponsibleWithoutIdentifier responsibleWithoutIdentifier) {
    this.responsibleWithoutIdentifier = responsibleWithoutIdentifier;
    return this;
  }

   /**
   * Get responsibleWithoutIdentifier
   * @return responsibleWithoutIdentifier
  **/
  @javax.annotation.Nullable
  public ParentalResponsibilityResponsibleWithoutIdentifier getResponsibleWithoutIdentifier() {
    return responsibleWithoutIdentifier;
  }

  public void setResponsibleWithoutIdentifier(ParentalResponsibilityResponsibleWithoutIdentifier responsibleWithoutIdentifier) {
    this.responsibleWithoutIdentifier = responsibleWithoutIdentifier;
  }


  public ParentalResponsibility subjectOfResponsibilityWithoutIdentifier(ParentalResponsibilitySubjectOfResponsibilityWithoutIdentifier subjectOfResponsibilityWithoutIdentifier) {
    this.subjectOfResponsibilityWithoutIdentifier = subjectOfResponsibilityWithoutIdentifier;
    return this;
  }

   /**
   * Get subjectOfResponsibilityWithoutIdentifier
   * @return subjectOfResponsibilityWithoutIdentifier
  **/
  @javax.annotation.Nullable
  public ParentalResponsibilitySubjectOfResponsibilityWithoutIdentifier getSubjectOfResponsibilityWithoutIdentifier() {
    return subjectOfResponsibilityWithoutIdentifier;
  }

  public void setSubjectOfResponsibilityWithoutIdentifier(ParentalResponsibilitySubjectOfResponsibilityWithoutIdentifier subjectOfResponsibilityWithoutIdentifier) {
    this.subjectOfResponsibilityWithoutIdentifier = subjectOfResponsibilityWithoutIdentifier;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ParentalResponsibility parentalResponsibility = (ParentalResponsibility) o;
    return Objects.equals(this.registeredAt, parentalResponsibility.registeredAt) &&
        Objects.equals(this.isValid, parentalResponsibility.isValid) &&
        Objects.equals(this.source, parentalResponsibility.source) &&
        Objects.equals(this.reason, parentalResponsibility.reason) &&
        Objects.equals(this.validFrom, parentalResponsibility.validFrom) &&
        Objects.equals(this.validTo, parentalResponsibility.validTo) &&
        Objects.equals(this.responsibilityType, parentalResponsibility.responsibilityType) &&
        Objects.equals(this.subjectOfResponsibility, parentalResponsibility.subjectOfResponsibility) &&
        Objects.equals(this.responsible, parentalResponsibility.responsible) &&
        Objects.equals(this.responsibleOrganization, parentalResponsibility.responsibleOrganization) &&
        Objects.equals(this.responsibleWithoutIdentifier, parentalResponsibility.responsibleWithoutIdentifier) &&
        Objects.equals(this.subjectOfResponsibilityWithoutIdentifier, parentalResponsibility.subjectOfResponsibilityWithoutIdentifier);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(registeredAt, isValid, source, reason, validFrom, validTo, responsibilityType, subjectOfResponsibility, responsible, responsibleOrganization, responsibleWithoutIdentifier, subjectOfResponsibilityWithoutIdentifier);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ParentalResponsibility {\n");
    sb.append("    registeredAt: ").append(toIndentedString(registeredAt)).append("\n");
    sb.append("    isValid: ").append(toIndentedString(isValid)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    validFrom: ").append(toIndentedString(validFrom)).append("\n");
    sb.append("    validTo: ").append(toIndentedString(validTo)).append("\n");
    sb.append("    responsibilityType: ").append(toIndentedString(responsibilityType)).append("\n");
    sb.append("    subjectOfResponsibility: ").append(toIndentedString(subjectOfResponsibility)).append("\n");
    sb.append("    responsible: ").append(toIndentedString(responsible)).append("\n");
    sb.append("    responsibleOrganization: ").append(toIndentedString(responsibleOrganization)).append("\n");
    sb.append("    responsibleWithoutIdentifier: ").append(toIndentedString(responsibleWithoutIdentifier)).append("\n");
    sb.append("    subjectOfResponsibilityWithoutIdentifier: ").append(toIndentedString(subjectOfResponsibilityWithoutIdentifier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("registeredAt");
    openapiFields.add("isValid");
    openapiFields.add("source");
    openapiFields.add("reason");
    openapiFields.add("validFrom");
    openapiFields.add("validTo");
    openapiFields.add("responsibilityType");
    openapiFields.add("subjectOfResponsibility");
    openapiFields.add("responsible");
    openapiFields.add("responsibleOrganization");
    openapiFields.add("responsibleWithoutIdentifier");
    openapiFields.add("subjectOfResponsibilityWithoutIdentifier");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ParentalResponsibility
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ParentalResponsibility.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ParentalResponsibility is not found in the empty JSON string", ParentalResponsibility.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ParentalResponsibility.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ParentalResponsibility` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) && !jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      if ((jsonObj.get("reason") != null && !jsonObj.get("reason").isJsonNull()) && !jsonObj.get("reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason").toString()));
      }
      // validate the optional field `responsibilityType`
      if (jsonObj.get("responsibilityType") != null && !jsonObj.get("responsibilityType").isJsonNull()) {
        ParentalResponsibilityType.validateJsonElement(jsonObj.get("responsibilityType"));
      }
      if ((jsonObj.get("subjectOfResponsibility") != null && !jsonObj.get("subjectOfResponsibility").isJsonNull()) && !jsonObj.get("subjectOfResponsibility").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subjectOfResponsibility` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subjectOfResponsibility").toString()));
      }
      if ((jsonObj.get("responsible") != null && !jsonObj.get("responsible").isJsonNull()) && !jsonObj.get("responsible").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `responsible` to be a primitive type in the JSON string but got `%s`", jsonObj.get("responsible").toString()));
      }
      if ((jsonObj.get("responsibleOrganization") != null && !jsonObj.get("responsibleOrganization").isJsonNull()) && !jsonObj.get("responsibleOrganization").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `responsibleOrganization` to be a primitive type in the JSON string but got `%s`", jsonObj.get("responsibleOrganization").toString()));
      }
      // validate the optional field `responsibleWithoutIdentifier`
      if (jsonObj.get("responsibleWithoutIdentifier") != null && !jsonObj.get("responsibleWithoutIdentifier").isJsonNull()) {
        ParentalResponsibilityResponsibleWithoutIdentifier.validateJsonElement(jsonObj.get("responsibleWithoutIdentifier"));
      }
      // validate the optional field `subjectOfResponsibilityWithoutIdentifier`
      if (jsonObj.get("subjectOfResponsibilityWithoutIdentifier") != null && !jsonObj.get("subjectOfResponsibilityWithoutIdentifier").isJsonNull()) {
        ParentalResponsibilitySubjectOfResponsibilityWithoutIdentifier.validateJsonElement(jsonObj.get("subjectOfResponsibilityWithoutIdentifier"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ParentalResponsibility.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ParentalResponsibility' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ParentalResponsibility> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ParentalResponsibility.class));

       return (TypeAdapter<T>) new TypeAdapter<ParentalResponsibility>() {
           @Override
           public void write(JsonWriter out, ParentalResponsibility value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ParentalResponsibility read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ParentalResponsibility given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ParentalResponsibility
  * @throws IOException if the JSON string is invalid with respect to ParentalResponsibility
  */
  public static ParentalResponsibility fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ParentalResponsibility.class);
  }

 /**
  * Convert an instance of ParentalResponsibility to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

