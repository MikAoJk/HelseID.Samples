/*
 * Persontjenesten API - ET
 * The Person API provides information on norwegian citizens for the norwegian public health sector, and is maintained by [Norsk helsenett](https://www.nhn.no/).  An API changelog is available [here](../static/changelog/index.html).  For more documentation and a complete integration guide, see the [NHN developer portal](https://utviklerportal.nhn.no/informasjonstjenester/persontjenesten/). 
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;br&gt;FREG: Foedsel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-30T07:50:48.244395087Z[Etc/UTC]", comments = "Generator version: 7.7.0-SNAPSHOT")
public class Birth {
  public static final String SERIALIZED_NAME_REGISTERED_AT = "registeredAt";
  @SerializedName(SERIALIZED_NAME_REGISTERED_AT)
  private OffsetDateTime registeredAt;

  public static final String SERIALIZED_NAME_IS_VALID = "isValid";
  @SerializedName(SERIALIZED_NAME_IS_VALID)
  private Boolean isValid;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private String reason;

  public static final String SERIALIZED_NAME_VALID_FROM = "validFrom";
  @SerializedName(SERIALIZED_NAME_VALID_FROM)
  private OffsetDateTime validFrom;

  public static final String SERIALIZED_NAME_VALID_TO = "validTo";
  @SerializedName(SERIALIZED_NAME_VALID_TO)
  private OffsetDateTime validTo;

  public static final String SERIALIZED_NAME_BIRTH_DATE = "birthDate";
  @SerializedName(SERIALIZED_NAME_BIRTH_DATE)
  private OffsetDateTime birthDate;

  public static final String SERIALIZED_NAME_BIRTH_YEAR = "birthYear";
  @SerializedName(SERIALIZED_NAME_BIRTH_YEAR)
  private String birthYear;

  public static final String SERIALIZED_NAME_BIRTH_PLACE = "birthPlace";
  @SerializedName(SERIALIZED_NAME_BIRTH_PLACE)
  private String birthPlace;

  public static final String SERIALIZED_NAME_BIRTH_MUNICIPALITY_NUMBER = "birthMunicipalityNumber";
  @SerializedName(SERIALIZED_NAME_BIRTH_MUNICIPALITY_NUMBER)
  private String birthMunicipalityNumber;

  public static final String SERIALIZED_NAME_BIRTH_MUNICIPALITY_NAME = "birthMunicipalityName";
  @SerializedName(SERIALIZED_NAME_BIRTH_MUNICIPALITY_NAME)
  private String birthMunicipalityName;

  public static final String SERIALIZED_NAME_BIRTH_COUNTY_NUMBER = "birthCountyNumber";
  @SerializedName(SERIALIZED_NAME_BIRTH_COUNTY_NUMBER)
  private String birthCountyNumber;

  public static final String SERIALIZED_NAME_BIRTH_COUNTY_NAME = "birthCountyName";
  @SerializedName(SERIALIZED_NAME_BIRTH_COUNTY_NAME)
  private String birthCountyName;

  public static final String SERIALIZED_NAME_BIRTH_COUNTRY = "birthCountry";
  @SerializedName(SERIALIZED_NAME_BIRTH_COUNTRY)
  private String birthCountry;

  public Birth() {
  }

  public Birth registeredAt(OffsetDateTime registeredAt) {
    this.registeredAt = registeredAt;
    return this;
  }

   /**
   * &lt;br&gt;FREG: Ajourholdstidspunkt
   * @return registeredAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getRegisteredAt() {
    return registeredAt;
  }

  public void setRegisteredAt(OffsetDateTime registeredAt) {
    this.registeredAt = registeredAt;
  }


  public Birth isValid(Boolean isValid) {
    this.isValid = isValid;
    return this;
  }

   /**
   * &lt;br&gt;FREG: ErGjeldende
   * @return isValid
  **/
  @javax.annotation.Nullable
  public Boolean getIsValid() {
    return isValid;
  }

  public void setIsValid(Boolean isValid) {
    this.isValid = isValid;
  }


  public Birth source(String source) {
    this.source = source;
    return this;
  }

   /**
   * &lt;br&gt;FREG: Kilde
   * @return source
  **/
  @javax.annotation.Nullable
  public String getSource() {
    return source;
  }

  public void setSource(String source) {
    this.source = source;
  }


  public Birth reason(String reason) {
    this.reason = reason;
    return this;
  }

   /**
   * &lt;br&gt;FREG: Aarsak
   * @return reason
  **/
  @javax.annotation.Nullable
  public String getReason() {
    return reason;
  }

  public void setReason(String reason) {
    this.reason = reason;
  }


  public Birth validFrom(OffsetDateTime validFrom) {
    this.validFrom = validFrom;
    return this;
  }

   /**
   * &lt;br&gt;FREG: Gyldighetstidspunkt
   * @return validFrom
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getValidFrom() {
    return validFrom;
  }

  public void setValidFrom(OffsetDateTime validFrom) {
    this.validFrom = validFrom;
  }


  public Birth validTo(OffsetDateTime validTo) {
    this.validTo = validTo;
    return this;
  }

   /**
   * &lt;br&gt;FREG: Opphoerstidspunkt
   * @return validTo
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getValidTo() {
    return validTo;
  }

  public void setValidTo(OffsetDateTime validTo) {
    this.validTo = validTo;
  }


  public Birth birthDate(OffsetDateTime birthDate) {
    this.birthDate = birthDate;
    return this;
  }

   /**
   * Date of birth. Time and time zone are unknown and must be ignored.  &lt;br&gt;FREG: Foedselsdato
   * @return birthDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getBirthDate() {
    return birthDate;
  }

  public void setBirthDate(OffsetDateTime birthDate) {
    this.birthDate = birthDate;
  }


  public Birth birthYear(String birthYear) {
    this.birthYear = birthYear;
    return this;
  }

   /**
   * &lt;br&gt;FREG: Foedselsaar
   * @return birthYear
  **/
  @javax.annotation.Nullable
  public String getBirthYear() {
    return birthYear;
  }

  public void setBirthYear(String birthYear) {
    this.birthYear = birthYear;
  }


  public Birth birthPlace(String birthPlace) {
    this.birthPlace = birthPlace;
    return this;
  }

   /**
   * &lt;br&gt;FREG: Foedested
   * @return birthPlace
  **/
  @javax.annotation.Nullable
  public String getBirthPlace() {
    return birthPlace;
  }

  public void setBirthPlace(String birthPlace) {
    this.birthPlace = birthPlace;
  }


  public Birth birthMunicipalityNumber(String birthMunicipalityNumber) {
    this.birthMunicipalityNumber = birthMunicipalityNumber;
    return this;
  }

   /**
   * Norwegian municipality number where the birth was registered, if the person was born in Norway.  &lt;br&gt;FREG: FoedekommuneINorge
   * @return birthMunicipalityNumber
  **/
  @javax.annotation.Nullable
  public String getBirthMunicipalityNumber() {
    return birthMunicipalityNumber;
  }

  public void setBirthMunicipalityNumber(String birthMunicipalityNumber) {
    this.birthMunicipalityNumber = birthMunicipalityNumber;
  }


  public Birth birthMunicipalityName(String birthMunicipalityName) {
    this.birthMunicipalityName = birthMunicipalityName;
    return this;
  }

   /**
   * A name identifying a municipality or  municipality-like area  &lt;br&gt;SSB: Kommunenavn
   * @return birthMunicipalityName
  **/
  @javax.annotation.Nullable
  public String getBirthMunicipalityName() {
    return birthMunicipalityName;
  }

  public void setBirthMunicipalityName(String birthMunicipalityName) {
    this.birthMunicipalityName = birthMunicipalityName;
  }


  public Birth birthCountyNumber(String birthCountyNumber) {
    this.birthCountyNumber = birthCountyNumber;
    return this;
  }

   /**
   * A number identifying a county   &lt;br&gt;SSB: Fylkesnummer
   * @return birthCountyNumber
  **/
  @javax.annotation.Nullable
  public String getBirthCountyNumber() {
    return birthCountyNumber;
  }

  public void setBirthCountyNumber(String birthCountyNumber) {
    this.birthCountyNumber = birthCountyNumber;
  }


  public Birth birthCountyName(String birthCountyName) {
    this.birthCountyName = birthCountyName;
    return this;
  }

   /**
   * A name identifying a county  &lt;br&gt;SSB: Fylkesnavn
   * @return birthCountyName
  **/
  @javax.annotation.Nullable
  public String getBirthCountyName() {
    return birthCountyName;
  }

  public void setBirthCountyName(String birthCountyName) {
    this.birthCountyName = birthCountyName;
  }


  public Birth birthCountry(String birthCountry) {
    this.birthCountry = birthCountry;
    return this;
  }

   /**
   * The country code for the country where the person was born.  Country codes is given in ISO 3166-1 alpha 3  &lt;br&gt;FREG: Foedeland
   * @return birthCountry
  **/
  @javax.annotation.Nullable
  public String getBirthCountry() {
    return birthCountry;
  }

  public void setBirthCountry(String birthCountry) {
    this.birthCountry = birthCountry;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Birth birth = (Birth) o;
    return Objects.equals(this.registeredAt, birth.registeredAt) &&
        Objects.equals(this.isValid, birth.isValid) &&
        Objects.equals(this.source, birth.source) &&
        Objects.equals(this.reason, birth.reason) &&
        Objects.equals(this.validFrom, birth.validFrom) &&
        Objects.equals(this.validTo, birth.validTo) &&
        Objects.equals(this.birthDate, birth.birthDate) &&
        Objects.equals(this.birthYear, birth.birthYear) &&
        Objects.equals(this.birthPlace, birth.birthPlace) &&
        Objects.equals(this.birthMunicipalityNumber, birth.birthMunicipalityNumber) &&
        Objects.equals(this.birthMunicipalityName, birth.birthMunicipalityName) &&
        Objects.equals(this.birthCountyNumber, birth.birthCountyNumber) &&
        Objects.equals(this.birthCountyName, birth.birthCountyName) &&
        Objects.equals(this.birthCountry, birth.birthCountry);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(registeredAt, isValid, source, reason, validFrom, validTo, birthDate, birthYear, birthPlace, birthMunicipalityNumber, birthMunicipalityName, birthCountyNumber, birthCountyName, birthCountry);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Birth {\n");
    sb.append("    registeredAt: ").append(toIndentedString(registeredAt)).append("\n");
    sb.append("    isValid: ").append(toIndentedString(isValid)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    validFrom: ").append(toIndentedString(validFrom)).append("\n");
    sb.append("    validTo: ").append(toIndentedString(validTo)).append("\n");
    sb.append("    birthDate: ").append(toIndentedString(birthDate)).append("\n");
    sb.append("    birthYear: ").append(toIndentedString(birthYear)).append("\n");
    sb.append("    birthPlace: ").append(toIndentedString(birthPlace)).append("\n");
    sb.append("    birthMunicipalityNumber: ").append(toIndentedString(birthMunicipalityNumber)).append("\n");
    sb.append("    birthMunicipalityName: ").append(toIndentedString(birthMunicipalityName)).append("\n");
    sb.append("    birthCountyNumber: ").append(toIndentedString(birthCountyNumber)).append("\n");
    sb.append("    birthCountyName: ").append(toIndentedString(birthCountyName)).append("\n");
    sb.append("    birthCountry: ").append(toIndentedString(birthCountry)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("registeredAt");
    openapiFields.add("isValid");
    openapiFields.add("source");
    openapiFields.add("reason");
    openapiFields.add("validFrom");
    openapiFields.add("validTo");
    openapiFields.add("birthDate");
    openapiFields.add("birthYear");
    openapiFields.add("birthPlace");
    openapiFields.add("birthMunicipalityNumber");
    openapiFields.add("birthMunicipalityName");
    openapiFields.add("birthCountyNumber");
    openapiFields.add("birthCountyName");
    openapiFields.add("birthCountry");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Birth
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Birth.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Birth is not found in the empty JSON string", Birth.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Birth.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Birth` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) && !jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      if ((jsonObj.get("reason") != null && !jsonObj.get("reason").isJsonNull()) && !jsonObj.get("reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason").toString()));
      }
      if ((jsonObj.get("birthYear") != null && !jsonObj.get("birthYear").isJsonNull()) && !jsonObj.get("birthYear").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `birthYear` to be a primitive type in the JSON string but got `%s`", jsonObj.get("birthYear").toString()));
      }
      if ((jsonObj.get("birthPlace") != null && !jsonObj.get("birthPlace").isJsonNull()) && !jsonObj.get("birthPlace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `birthPlace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("birthPlace").toString()));
      }
      if ((jsonObj.get("birthMunicipalityNumber") != null && !jsonObj.get("birthMunicipalityNumber").isJsonNull()) && !jsonObj.get("birthMunicipalityNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `birthMunicipalityNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("birthMunicipalityNumber").toString()));
      }
      if ((jsonObj.get("birthMunicipalityName") != null && !jsonObj.get("birthMunicipalityName").isJsonNull()) && !jsonObj.get("birthMunicipalityName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `birthMunicipalityName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("birthMunicipalityName").toString()));
      }
      if ((jsonObj.get("birthCountyNumber") != null && !jsonObj.get("birthCountyNumber").isJsonNull()) && !jsonObj.get("birthCountyNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `birthCountyNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("birthCountyNumber").toString()));
      }
      if ((jsonObj.get("birthCountyName") != null && !jsonObj.get("birthCountyName").isJsonNull()) && !jsonObj.get("birthCountyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `birthCountyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("birthCountyName").toString()));
      }
      if ((jsonObj.get("birthCountry") != null && !jsonObj.get("birthCountry").isJsonNull()) && !jsonObj.get("birthCountry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `birthCountry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("birthCountry").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Birth.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Birth' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Birth> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Birth.class));

       return (TypeAdapter<T>) new TypeAdapter<Birth>() {
           @Override
           public void write(JsonWriter out, Birth value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Birth read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Birth given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Birth
  * @throws IOException if the JSON string is invalid with respect to Birth
  */
  public static Birth fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Birth.class);
  }

 /**
  * Convert an instance of Birth to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

