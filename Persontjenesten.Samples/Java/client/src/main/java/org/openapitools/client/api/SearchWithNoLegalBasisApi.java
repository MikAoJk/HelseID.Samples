/*
 * Persontjenesten API - ET
 * The Person API provides information on norwegian citizens for the norwegian public health sector, and is maintained by [Norsk helsenett](https://www.nhn.no/).  An API changelog is available [here](../static/changelog/index.html).  For more documentation and a complete integration guide, see the [NHN developer portal](https://utviklerportal.nhn.no/informasjonstjenester/persontjenesten/). 
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Gender;
import org.openapitools.client.model.InformationPart;
import org.openapitools.client.model.PersonSearchResult;
import org.openapitools.client.model.PersonStatusType;
import org.openapitools.client.model.ProblemDetails;
import org.openapitools.client.model.SearchMatchCountResult;
import org.openapitools.client.model.StringSearchResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SearchWithNoLegalBasisApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SearchWithNoLegalBasisApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SearchWithNoLegalBasisApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiNoLegalBasisSearchMatchCountPost
     * @param apiVersion The requested API version (required)
     * @param includeAinResults flag to determine if search results should include persons with alternate identification numbers (optional, default to false)
     * @param pageSize The maximum size of the returned result set. Defaults to 1000, max page size is 10000.  When the returned result set is less then the requested page size then you have reached the end of the total search result. (optional, default to 1000)
     * @param indexOffset The index offset for the search. A paged-match-list search will return both a startIndex and endIndex in the response.  If the number of search results is larger than the page size, the next portion of the result can be retrieved by setting the  index offset to the end index of the first result, plus one (endIndex + 1). (optional, default to 0)
     * @param fullName The whole or parts of a person&#39;s full name. Only letters are allowed, up to 600 characters.  The search string will be divided into separate search words, and these words can match  the start of any part of the person&#39;s full name, regardless of the order of search words.  Only the first three search words will be used. (optional)
     * @param givenName The whole or the first part of a person&#39;s given name.  Only letters are allowed, up to 200 characters. (optional)
     * @param middleName The whole or first part of a person&#39;s middle name.  Only letters are allowed, up to 200 characters. (optional)
     * @param familyName The whole or first part of a person&#39;s family name.  Only letters are allowed, up to 200 characters. (optional)
     * @param streetAddress The street address of the street where the person lives.  Contains of letters, house number, and house letter, up to 200 characters. (optional)
     * @param postalCode The postal code (postnummer) number where the person lives.  If provided, needs to be exactly four digits. (optional)
     * @param municipalityNumber The municipality number of the municipality the person lives in.  If provided, needs to be exactly four digits. (optional)
     * @param basicStatisticalUnit The basic statistical unit number of the basic statistical unit the person lives in.  If provided, needs to be exactly eight digits. (optional)
     * @param birthDateFrom Will return persons with a birthday equal to or higher than the given value.  The person&#39;s date of birth provided as a string, formatted as YYYY-MM-DD  Searching only by year (YYYY) or year and month (YYYY-MM) is also allowed. (optional)
     * @param birthDateTo Will return persons with a birthday equal to or lower than the given value.  The person&#39;s date of birth provided as a string, formatted as YYYY-MM-DD.  Searching only by year (YYYY) or year and month (YYYY-MM) is also allowed. (optional)
     * @param gender The person&#39;s gender (optional)
     * @param personStatuses The nature of the relationship/connection  to Norway and the National Population Registry (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Search result with a list of person ids </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiNoLegalBasisSearchMatchCountPostCall(String apiVersion, Boolean includeAinResults, Integer pageSize, Integer indexOffset, String fullName, String givenName, String middleName, String familyName, String streetAddress, String postalCode, String municipalityNumber, String basicStatisticalUnit, String birthDateFrom, String birthDateTo, Gender gender, List<PersonStatusType> personStatuses, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/no-legal-basis/search/match-count";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarFormParams.put("PageSize", pageSize);
        }

        if (indexOffset != null) {
            localVarFormParams.put("IndexOffset", indexOffset);
        }

        if (fullName != null) {
            localVarFormParams.put("FullName", fullName);
        }

        if (givenName != null) {
            localVarFormParams.put("GivenName", givenName);
        }

        if (middleName != null) {
            localVarFormParams.put("MiddleName", middleName);
        }

        if (familyName != null) {
            localVarFormParams.put("FamilyName", familyName);
        }

        if (streetAddress != null) {
            localVarFormParams.put("StreetAddress", streetAddress);
        }

        if (postalCode != null) {
            localVarFormParams.put("PostalCode", postalCode);
        }

        if (municipalityNumber != null) {
            localVarFormParams.put("MunicipalityNumber", municipalityNumber);
        }

        if (basicStatisticalUnit != null) {
            localVarFormParams.put("BasicStatisticalUnit", basicStatisticalUnit);
        }

        if (birthDateFrom != null) {
            localVarFormParams.put("BirthDateFrom", birthDateFrom);
        }

        if (birthDateTo != null) {
            localVarFormParams.put("BirthDateTo", birthDateTo);
        }

        if (gender != null) {
            localVarFormParams.put("Gender", gender);
        }

        if (personStatuses != null) {
            localVarFormParams.put("PersonStatuses", personStatuses);
        }

        if (includeAinResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeAinResults", includeAinResults));
        }

        if (apiVersion != null) {
            localVarHeaderParams.put("api-version", localVarApiClient.parameterToString(apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HelseID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiNoLegalBasisSearchMatchCountPostValidateBeforeCall(String apiVersion, Boolean includeAinResults, Integer pageSize, Integer indexOffset, String fullName, String givenName, String middleName, String familyName, String streetAddress, String postalCode, String municipalityNumber, String basicStatisticalUnit, String birthDateFrom, String birthDateTo, Gender gender, List<PersonStatusType> personStatuses, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling apiNoLegalBasisSearchMatchCountPost(Async)");
        }

        return apiNoLegalBasisSearchMatchCountPostCall(apiVersion, includeAinResults, pageSize, indexOffset, fullName, givenName, middleName, familyName, streetAddress, postalCode, municipalityNumber, basicStatisticalUnit, birthDateFrom, birthDateTo, gender, personStatuses, _callback);

    }

    /**
     * Works same way as \&quot;paged-match-list\&quot; regarding search parameters, but returned result is just the total count of matches that would have been returned.
     * See documentation for \&quot;paged-match-list\&quot; for more details.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadNoLegalBasis
     * @param apiVersion The requested API version (required)
     * @param includeAinResults flag to determine if search results should include persons with alternate identification numbers (optional, default to false)
     * @param pageSize The maximum size of the returned result set. Defaults to 1000, max page size is 10000.  When the returned result set is less then the requested page size then you have reached the end of the total search result. (optional, default to 1000)
     * @param indexOffset The index offset for the search. A paged-match-list search will return both a startIndex and endIndex in the response.  If the number of search results is larger than the page size, the next portion of the result can be retrieved by setting the  index offset to the end index of the first result, plus one (endIndex + 1). (optional, default to 0)
     * @param fullName The whole or parts of a person&#39;s full name. Only letters are allowed, up to 600 characters.  The search string will be divided into separate search words, and these words can match  the start of any part of the person&#39;s full name, regardless of the order of search words.  Only the first three search words will be used. (optional)
     * @param givenName The whole or the first part of a person&#39;s given name.  Only letters are allowed, up to 200 characters. (optional)
     * @param middleName The whole or first part of a person&#39;s middle name.  Only letters are allowed, up to 200 characters. (optional)
     * @param familyName The whole or first part of a person&#39;s family name.  Only letters are allowed, up to 200 characters. (optional)
     * @param streetAddress The street address of the street where the person lives.  Contains of letters, house number, and house letter, up to 200 characters. (optional)
     * @param postalCode The postal code (postnummer) number where the person lives.  If provided, needs to be exactly four digits. (optional)
     * @param municipalityNumber The municipality number of the municipality the person lives in.  If provided, needs to be exactly four digits. (optional)
     * @param basicStatisticalUnit The basic statistical unit number of the basic statistical unit the person lives in.  If provided, needs to be exactly eight digits. (optional)
     * @param birthDateFrom Will return persons with a birthday equal to or higher than the given value.  The person&#39;s date of birth provided as a string, formatted as YYYY-MM-DD  Searching only by year (YYYY) or year and month (YYYY-MM) is also allowed. (optional)
     * @param birthDateTo Will return persons with a birthday equal to or lower than the given value.  The person&#39;s date of birth provided as a string, formatted as YYYY-MM-DD.  Searching only by year (YYYY) or year and month (YYYY-MM) is also allowed. (optional)
     * @param gender The person&#39;s gender (optional)
     * @param personStatuses The nature of the relationship/connection  to Norway and the National Population Registry (optional)
     * @return SearchMatchCountResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Search result with a list of person ids </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public SearchMatchCountResult apiNoLegalBasisSearchMatchCountPost(String apiVersion, Boolean includeAinResults, Integer pageSize, Integer indexOffset, String fullName, String givenName, String middleName, String familyName, String streetAddress, String postalCode, String municipalityNumber, String basicStatisticalUnit, String birthDateFrom, String birthDateTo, Gender gender, List<PersonStatusType> personStatuses) throws ApiException {
        ApiResponse<SearchMatchCountResult> localVarResp = apiNoLegalBasisSearchMatchCountPostWithHttpInfo(apiVersion, includeAinResults, pageSize, indexOffset, fullName, givenName, middleName, familyName, streetAddress, postalCode, municipalityNumber, basicStatisticalUnit, birthDateFrom, birthDateTo, gender, personStatuses);
        return localVarResp.getData();
    }

    /**
     * Works same way as \&quot;paged-match-list\&quot; regarding search parameters, but returned result is just the total count of matches that would have been returned.
     * See documentation for \&quot;paged-match-list\&quot; for more details.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadNoLegalBasis
     * @param apiVersion The requested API version (required)
     * @param includeAinResults flag to determine if search results should include persons with alternate identification numbers (optional, default to false)
     * @param pageSize The maximum size of the returned result set. Defaults to 1000, max page size is 10000.  When the returned result set is less then the requested page size then you have reached the end of the total search result. (optional, default to 1000)
     * @param indexOffset The index offset for the search. A paged-match-list search will return both a startIndex and endIndex in the response.  If the number of search results is larger than the page size, the next portion of the result can be retrieved by setting the  index offset to the end index of the first result, plus one (endIndex + 1). (optional, default to 0)
     * @param fullName The whole or parts of a person&#39;s full name. Only letters are allowed, up to 600 characters.  The search string will be divided into separate search words, and these words can match  the start of any part of the person&#39;s full name, regardless of the order of search words.  Only the first three search words will be used. (optional)
     * @param givenName The whole or the first part of a person&#39;s given name.  Only letters are allowed, up to 200 characters. (optional)
     * @param middleName The whole or first part of a person&#39;s middle name.  Only letters are allowed, up to 200 characters. (optional)
     * @param familyName The whole or first part of a person&#39;s family name.  Only letters are allowed, up to 200 characters. (optional)
     * @param streetAddress The street address of the street where the person lives.  Contains of letters, house number, and house letter, up to 200 characters. (optional)
     * @param postalCode The postal code (postnummer) number where the person lives.  If provided, needs to be exactly four digits. (optional)
     * @param municipalityNumber The municipality number of the municipality the person lives in.  If provided, needs to be exactly four digits. (optional)
     * @param basicStatisticalUnit The basic statistical unit number of the basic statistical unit the person lives in.  If provided, needs to be exactly eight digits. (optional)
     * @param birthDateFrom Will return persons with a birthday equal to or higher than the given value.  The person&#39;s date of birth provided as a string, formatted as YYYY-MM-DD  Searching only by year (YYYY) or year and month (YYYY-MM) is also allowed. (optional)
     * @param birthDateTo Will return persons with a birthday equal to or lower than the given value.  The person&#39;s date of birth provided as a string, formatted as YYYY-MM-DD.  Searching only by year (YYYY) or year and month (YYYY-MM) is also allowed. (optional)
     * @param gender The person&#39;s gender (optional)
     * @param personStatuses The nature of the relationship/connection  to Norway and the National Population Registry (optional)
     * @return ApiResponse&lt;SearchMatchCountResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Search result with a list of person ids </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchMatchCountResult> apiNoLegalBasisSearchMatchCountPostWithHttpInfo(String apiVersion, Boolean includeAinResults, Integer pageSize, Integer indexOffset, String fullName, String givenName, String middleName, String familyName, String streetAddress, String postalCode, String municipalityNumber, String basicStatisticalUnit, String birthDateFrom, String birthDateTo, Gender gender, List<PersonStatusType> personStatuses) throws ApiException {
        okhttp3.Call localVarCall = apiNoLegalBasisSearchMatchCountPostValidateBeforeCall(apiVersion, includeAinResults, pageSize, indexOffset, fullName, givenName, middleName, familyName, streetAddress, postalCode, municipalityNumber, basicStatisticalUnit, birthDateFrom, birthDateTo, gender, personStatuses, null);
        Type localVarReturnType = new TypeToken<SearchMatchCountResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Works same way as \&quot;paged-match-list\&quot; regarding search parameters, but returned result is just the total count of matches that would have been returned. (asynchronously)
     * See documentation for \&quot;paged-match-list\&quot; for more details.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadNoLegalBasis
     * @param apiVersion The requested API version (required)
     * @param includeAinResults flag to determine if search results should include persons with alternate identification numbers (optional, default to false)
     * @param pageSize The maximum size of the returned result set. Defaults to 1000, max page size is 10000.  When the returned result set is less then the requested page size then you have reached the end of the total search result. (optional, default to 1000)
     * @param indexOffset The index offset for the search. A paged-match-list search will return both a startIndex and endIndex in the response.  If the number of search results is larger than the page size, the next portion of the result can be retrieved by setting the  index offset to the end index of the first result, plus one (endIndex + 1). (optional, default to 0)
     * @param fullName The whole or parts of a person&#39;s full name. Only letters are allowed, up to 600 characters.  The search string will be divided into separate search words, and these words can match  the start of any part of the person&#39;s full name, regardless of the order of search words.  Only the first three search words will be used. (optional)
     * @param givenName The whole or the first part of a person&#39;s given name.  Only letters are allowed, up to 200 characters. (optional)
     * @param middleName The whole or first part of a person&#39;s middle name.  Only letters are allowed, up to 200 characters. (optional)
     * @param familyName The whole or first part of a person&#39;s family name.  Only letters are allowed, up to 200 characters. (optional)
     * @param streetAddress The street address of the street where the person lives.  Contains of letters, house number, and house letter, up to 200 characters. (optional)
     * @param postalCode The postal code (postnummer) number where the person lives.  If provided, needs to be exactly four digits. (optional)
     * @param municipalityNumber The municipality number of the municipality the person lives in.  If provided, needs to be exactly four digits. (optional)
     * @param basicStatisticalUnit The basic statistical unit number of the basic statistical unit the person lives in.  If provided, needs to be exactly eight digits. (optional)
     * @param birthDateFrom Will return persons with a birthday equal to or higher than the given value.  The person&#39;s date of birth provided as a string, formatted as YYYY-MM-DD  Searching only by year (YYYY) or year and month (YYYY-MM) is also allowed. (optional)
     * @param birthDateTo Will return persons with a birthday equal to or lower than the given value.  The person&#39;s date of birth provided as a string, formatted as YYYY-MM-DD.  Searching only by year (YYYY) or year and month (YYYY-MM) is also allowed. (optional)
     * @param gender The person&#39;s gender (optional)
     * @param personStatuses The nature of the relationship/connection  to Norway and the National Population Registry (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Search result with a list of person ids </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiNoLegalBasisSearchMatchCountPostAsync(String apiVersion, Boolean includeAinResults, Integer pageSize, Integer indexOffset, String fullName, String givenName, String middleName, String familyName, String streetAddress, String postalCode, String municipalityNumber, String basicStatisticalUnit, String birthDateFrom, String birthDateTo, Gender gender, List<PersonStatusType> personStatuses, final ApiCallback<SearchMatchCountResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiNoLegalBasisSearchMatchCountPostValidateBeforeCall(apiVersion, includeAinResults, pageSize, indexOffset, fullName, givenName, middleName, familyName, streetAddress, postalCode, municipalityNumber, basicStatisticalUnit, birthDateFrom, birthDateTo, gender, personStatuses, _callback);
        Type localVarReturnType = new TypeToken<SearchMatchCountResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiNoLegalBasisSearchMatchListPost
     * @param apiVersion The requested API version (required)
     * @param fullName The whole or parts of a person&#39;s full name. Only letters are allowed, up to 600 characters.  The search string will be divided into separate search words, and these words can match  the start of any part of the person&#39;s full name, regardless of the order of search words.  Only the first three search words will be used. (optional)
     * @param givenName The whole or the first part of a person&#39;s given name.  Only letters are allowed, up to 200 characters. (optional)
     * @param middleName The whole or first part of a person&#39;s middle name.  Only letters are allowed, up to 200 characters. (optional)
     * @param familyName The whole or first part of a person&#39;s family name.  Only letters are allowed, up to 200 characters. (optional)
     * @param streetAddress The street address of the street where the person lives.  Contains of letters, house number, and house letter, up to 200 characters. (optional)
     * @param postalCode The postal code (postnummer) number where the person lives.  If provided, needs to be exactly four digits. (optional)
     * @param municipalityNumber The municipality number of the municipality the person lives in.  If provided, needs to be exactly four digits. (optional)
     * @param basicStatisticalUnit The basic statistical unit number of the basic statistical unit the person lives in.  If provided, needs to be exactly eight digits. (optional)
     * @param birthDateFrom Will return persons with a birthday equal to or higher than the given value.  The person&#39;s date of birth provided as a string, formatted as YYYY-MM-DD  Searching only by year (YYYY) or year and month (YYYY-MM) is also allowed. (optional)
     * @param birthDateTo Will return persons with a birthday equal to or lower than the given value.  The person&#39;s date of birth provided as a string, formatted as YYYY-MM-DD.  Searching only by year (YYYY) or year and month (YYYY-MM) is also allowed. (optional)
     * @param gender The person&#39;s gender (optional)
     * @param personStatuses The nature of the relationship/connection  to Norway and the National Population Registry (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Search result with a list of person ids </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call apiNoLegalBasisSearchMatchListPostCall(String apiVersion, String fullName, String givenName, String middleName, String familyName, String streetAddress, String postalCode, String municipalityNumber, String basicStatisticalUnit, String birthDateFrom, String birthDateTo, Gender gender, List<PersonStatusType> personStatuses, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/no-legal-basis/search/match-list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fullName != null) {
            localVarFormParams.put("FullName", fullName);
        }

        if (givenName != null) {
            localVarFormParams.put("GivenName", givenName);
        }

        if (middleName != null) {
            localVarFormParams.put("MiddleName", middleName);
        }

        if (familyName != null) {
            localVarFormParams.put("FamilyName", familyName);
        }

        if (streetAddress != null) {
            localVarFormParams.put("StreetAddress", streetAddress);
        }

        if (postalCode != null) {
            localVarFormParams.put("PostalCode", postalCode);
        }

        if (municipalityNumber != null) {
            localVarFormParams.put("MunicipalityNumber", municipalityNumber);
        }

        if (basicStatisticalUnit != null) {
            localVarFormParams.put("BasicStatisticalUnit", basicStatisticalUnit);
        }

        if (birthDateFrom != null) {
            localVarFormParams.put("BirthDateFrom", birthDateFrom);
        }

        if (birthDateTo != null) {
            localVarFormParams.put("BirthDateTo", birthDateTo);
        }

        if (gender != null) {
            localVarFormParams.put("Gender", gender);
        }

        if (personStatuses != null) {
            localVarFormParams.put("PersonStatuses", personStatuses);
        }

        if (apiVersion != null) {
            localVarHeaderParams.put("api-version", localVarApiClient.parameterToString(apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HelseID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiNoLegalBasisSearchMatchListPostValidateBeforeCall(String apiVersion, String fullName, String givenName, String middleName, String familyName, String streetAddress, String postalCode, String municipalityNumber, String basicStatisticalUnit, String birthDateFrom, String birthDateTo, Gender gender, List<PersonStatusType> personStatuses, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling apiNoLegalBasisSearchMatchListPost(Async)");
        }

        return apiNoLegalBasisSearchMatchListPostCall(apiVersion, fullName, givenName, middleName, familyName, streetAddress, postalCode, municipalityNumber, basicStatisticalUnit, birthDateFrom, birthDateTo, gender, personStatuses, _callback);

    }

    /**
     * Search for a set of persons based on current information. Returns a search result with unique person ids, PersonId
     * Search for a set of persons based on current information. Returns a search result with unique person ids, see Person&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadNoLegalBasis
     * @param apiVersion The requested API version (required)
     * @param fullName The whole or parts of a person&#39;s full name. Only letters are allowed, up to 600 characters.  The search string will be divided into separate search words, and these words can match  the start of any part of the person&#39;s full name, regardless of the order of search words.  Only the first three search words will be used. (optional)
     * @param givenName The whole or the first part of a person&#39;s given name.  Only letters are allowed, up to 200 characters. (optional)
     * @param middleName The whole or first part of a person&#39;s middle name.  Only letters are allowed, up to 200 characters. (optional)
     * @param familyName The whole or first part of a person&#39;s family name.  Only letters are allowed, up to 200 characters. (optional)
     * @param streetAddress The street address of the street where the person lives.  Contains of letters, house number, and house letter, up to 200 characters. (optional)
     * @param postalCode The postal code (postnummer) number where the person lives.  If provided, needs to be exactly four digits. (optional)
     * @param municipalityNumber The municipality number of the municipality the person lives in.  If provided, needs to be exactly four digits. (optional)
     * @param basicStatisticalUnit The basic statistical unit number of the basic statistical unit the person lives in.  If provided, needs to be exactly eight digits. (optional)
     * @param birthDateFrom Will return persons with a birthday equal to or higher than the given value.  The person&#39;s date of birth provided as a string, formatted as YYYY-MM-DD  Searching only by year (YYYY) or year and month (YYYY-MM) is also allowed. (optional)
     * @param birthDateTo Will return persons with a birthday equal to or lower than the given value.  The person&#39;s date of birth provided as a string, formatted as YYYY-MM-DD.  Searching only by year (YYYY) or year and month (YYYY-MM) is also allowed. (optional)
     * @param gender The person&#39;s gender (optional)
     * @param personStatuses The nature of the relationship/connection  to Norway and the National Population Registry (optional)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Search result with a list of person ids </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public List<String> apiNoLegalBasisSearchMatchListPost(String apiVersion, String fullName, String givenName, String middleName, String familyName, String streetAddress, String postalCode, String municipalityNumber, String basicStatisticalUnit, String birthDateFrom, String birthDateTo, Gender gender, List<PersonStatusType> personStatuses) throws ApiException {
        ApiResponse<List<String>> localVarResp = apiNoLegalBasisSearchMatchListPostWithHttpInfo(apiVersion, fullName, givenName, middleName, familyName, streetAddress, postalCode, municipalityNumber, basicStatisticalUnit, birthDateFrom, birthDateTo, gender, personStatuses);
        return localVarResp.getData();
    }

    /**
     * Search for a set of persons based on current information. Returns a search result with unique person ids, PersonId
     * Search for a set of persons based on current information. Returns a search result with unique person ids, see Person&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadNoLegalBasis
     * @param apiVersion The requested API version (required)
     * @param fullName The whole or parts of a person&#39;s full name. Only letters are allowed, up to 600 characters.  The search string will be divided into separate search words, and these words can match  the start of any part of the person&#39;s full name, regardless of the order of search words.  Only the first three search words will be used. (optional)
     * @param givenName The whole or the first part of a person&#39;s given name.  Only letters are allowed, up to 200 characters. (optional)
     * @param middleName The whole or first part of a person&#39;s middle name.  Only letters are allowed, up to 200 characters. (optional)
     * @param familyName The whole or first part of a person&#39;s family name.  Only letters are allowed, up to 200 characters. (optional)
     * @param streetAddress The street address of the street where the person lives.  Contains of letters, house number, and house letter, up to 200 characters. (optional)
     * @param postalCode The postal code (postnummer) number where the person lives.  If provided, needs to be exactly four digits. (optional)
     * @param municipalityNumber The municipality number of the municipality the person lives in.  If provided, needs to be exactly four digits. (optional)
     * @param basicStatisticalUnit The basic statistical unit number of the basic statistical unit the person lives in.  If provided, needs to be exactly eight digits. (optional)
     * @param birthDateFrom Will return persons with a birthday equal to or higher than the given value.  The person&#39;s date of birth provided as a string, formatted as YYYY-MM-DD  Searching only by year (YYYY) or year and month (YYYY-MM) is also allowed. (optional)
     * @param birthDateTo Will return persons with a birthday equal to or lower than the given value.  The person&#39;s date of birth provided as a string, formatted as YYYY-MM-DD.  Searching only by year (YYYY) or year and month (YYYY-MM) is also allowed. (optional)
     * @param gender The person&#39;s gender (optional)
     * @param personStatuses The nature of the relationship/connection  to Norway and the National Population Registry (optional)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Search result with a list of person ids </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<List<String>> apiNoLegalBasisSearchMatchListPostWithHttpInfo(String apiVersion, String fullName, String givenName, String middleName, String familyName, String streetAddress, String postalCode, String municipalityNumber, String basicStatisticalUnit, String birthDateFrom, String birthDateTo, Gender gender, List<PersonStatusType> personStatuses) throws ApiException {
        okhttp3.Call localVarCall = apiNoLegalBasisSearchMatchListPostValidateBeforeCall(apiVersion, fullName, givenName, middleName, familyName, streetAddress, postalCode, municipalityNumber, basicStatisticalUnit, birthDateFrom, birthDateTo, gender, personStatuses, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search for a set of persons based on current information. Returns a search result with unique person ids, PersonId (asynchronously)
     * Search for a set of persons based on current information. Returns a search result with unique person ids, see Person&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadNoLegalBasis
     * @param apiVersion The requested API version (required)
     * @param fullName The whole or parts of a person&#39;s full name. Only letters are allowed, up to 600 characters.  The search string will be divided into separate search words, and these words can match  the start of any part of the person&#39;s full name, regardless of the order of search words.  Only the first three search words will be used. (optional)
     * @param givenName The whole or the first part of a person&#39;s given name.  Only letters are allowed, up to 200 characters. (optional)
     * @param middleName The whole or first part of a person&#39;s middle name.  Only letters are allowed, up to 200 characters. (optional)
     * @param familyName The whole or first part of a person&#39;s family name.  Only letters are allowed, up to 200 characters. (optional)
     * @param streetAddress The street address of the street where the person lives.  Contains of letters, house number, and house letter, up to 200 characters. (optional)
     * @param postalCode The postal code (postnummer) number where the person lives.  If provided, needs to be exactly four digits. (optional)
     * @param municipalityNumber The municipality number of the municipality the person lives in.  If provided, needs to be exactly four digits. (optional)
     * @param basicStatisticalUnit The basic statistical unit number of the basic statistical unit the person lives in.  If provided, needs to be exactly eight digits. (optional)
     * @param birthDateFrom Will return persons with a birthday equal to or higher than the given value.  The person&#39;s date of birth provided as a string, formatted as YYYY-MM-DD  Searching only by year (YYYY) or year and month (YYYY-MM) is also allowed. (optional)
     * @param birthDateTo Will return persons with a birthday equal to or lower than the given value.  The person&#39;s date of birth provided as a string, formatted as YYYY-MM-DD.  Searching only by year (YYYY) or year and month (YYYY-MM) is also allowed. (optional)
     * @param gender The person&#39;s gender (optional)
     * @param personStatuses The nature of the relationship/connection  to Norway and the National Population Registry (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Search result with a list of person ids </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call apiNoLegalBasisSearchMatchListPostAsync(String apiVersion, String fullName, String givenName, String middleName, String familyName, String streetAddress, String postalCode, String municipalityNumber, String basicStatisticalUnit, String birthDateFrom, String birthDateTo, Gender gender, List<PersonStatusType> personStatuses, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiNoLegalBasisSearchMatchListPostValidateBeforeCall(apiVersion, fullName, givenName, middleName, familyName, streetAddress, postalCode, municipalityNumber, basicStatisticalUnit, birthDateFrom, birthDateTo, gender, personStatuses, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiNoLegalBasisSearchPagedMatchListPost
     * @param apiVersion The requested API version (required)
     * @param includeAinResults flag to determine if search results should include persons with alternate identification numbers (optional, default to false)
     * @param pageSize The maximum size of the returned result set. Defaults to 1000, max page size is 10000.  When the returned result set is less then the requested page size then you have reached the end of the total search result. (optional, default to 1000)
     * @param indexOffset The index offset for the search. A paged-match-list search will return both a startIndex and endIndex in the response.  If the number of search results is larger than the page size, the next portion of the result can be retrieved by setting the  index offset to the end index of the first result, plus one (endIndex + 1). (optional, default to 0)
     * @param fullName The whole or parts of a person&#39;s full name. Only letters are allowed, up to 600 characters.  The search string will be divided into separate search words, and these words can match  the start of any part of the person&#39;s full name, regardless of the order of search words.  Only the first three search words will be used. (optional)
     * @param givenName The whole or the first part of a person&#39;s given name.  Only letters are allowed, up to 200 characters. (optional)
     * @param middleName The whole or first part of a person&#39;s middle name.  Only letters are allowed, up to 200 characters. (optional)
     * @param familyName The whole or first part of a person&#39;s family name.  Only letters are allowed, up to 200 characters. (optional)
     * @param streetAddress The street address of the street where the person lives.  Contains of letters, house number, and house letter, up to 200 characters. (optional)
     * @param postalCode The postal code (postnummer) number where the person lives.  If provided, needs to be exactly four digits. (optional)
     * @param municipalityNumber The municipality number of the municipality the person lives in.  If provided, needs to be exactly four digits. (optional)
     * @param basicStatisticalUnit The basic statistical unit number of the basic statistical unit the person lives in.  If provided, needs to be exactly eight digits. (optional)
     * @param birthDateFrom Will return persons with a birthday equal to or higher than the given value.  The person&#39;s date of birth provided as a string, formatted as YYYY-MM-DD  Searching only by year (YYYY) or year and month (YYYY-MM) is also allowed. (optional)
     * @param birthDateTo Will return persons with a birthday equal to or lower than the given value.  The person&#39;s date of birth provided as a string, formatted as YYYY-MM-DD.  Searching only by year (YYYY) or year and month (YYYY-MM) is also allowed. (optional)
     * @param gender The person&#39;s gender (optional)
     * @param personStatuses The nature of the relationship/connection  to Norway and the National Population Registry (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Search result with a list of person ids </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiNoLegalBasisSearchPagedMatchListPostCall(String apiVersion, Boolean includeAinResults, Integer pageSize, Integer indexOffset, String fullName, String givenName, String middleName, String familyName, String streetAddress, String postalCode, String municipalityNumber, String basicStatisticalUnit, String birthDateFrom, String birthDateTo, Gender gender, List<PersonStatusType> personStatuses, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/no-legal-basis/search/paged-match-list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarFormParams.put("PageSize", pageSize);
        }

        if (indexOffset != null) {
            localVarFormParams.put("IndexOffset", indexOffset);
        }

        if (fullName != null) {
            localVarFormParams.put("FullName", fullName);
        }

        if (givenName != null) {
            localVarFormParams.put("GivenName", givenName);
        }

        if (middleName != null) {
            localVarFormParams.put("MiddleName", middleName);
        }

        if (familyName != null) {
            localVarFormParams.put("FamilyName", familyName);
        }

        if (streetAddress != null) {
            localVarFormParams.put("StreetAddress", streetAddress);
        }

        if (postalCode != null) {
            localVarFormParams.put("PostalCode", postalCode);
        }

        if (municipalityNumber != null) {
            localVarFormParams.put("MunicipalityNumber", municipalityNumber);
        }

        if (basicStatisticalUnit != null) {
            localVarFormParams.put("BasicStatisticalUnit", basicStatisticalUnit);
        }

        if (birthDateFrom != null) {
            localVarFormParams.put("BirthDateFrom", birthDateFrom);
        }

        if (birthDateTo != null) {
            localVarFormParams.put("BirthDateTo", birthDateTo);
        }

        if (gender != null) {
            localVarFormParams.put("Gender", gender);
        }

        if (personStatuses != null) {
            localVarFormParams.put("PersonStatuses", personStatuses);
        }

        if (includeAinResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeAinResults", includeAinResults));
        }

        if (apiVersion != null) {
            localVarHeaderParams.put("api-version", localVarApiClient.parameterToString(apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HelseID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiNoLegalBasisSearchPagedMatchListPostValidateBeforeCall(String apiVersion, Boolean includeAinResults, Integer pageSize, Integer indexOffset, String fullName, String givenName, String middleName, String familyName, String streetAddress, String postalCode, String municipalityNumber, String basicStatisticalUnit, String birthDateFrom, String birthDateTo, Gender gender, List<PersonStatusType> personStatuses, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling apiNoLegalBasisSearchPagedMatchListPost(Async)");
        }

        return apiNoLegalBasisSearchPagedMatchListPostCall(apiVersion, includeAinResults, pageSize, indexOffset, fullName, givenName, middleName, familyName, streetAddress, postalCode, municipalityNumber, basicStatisticalUnit, birthDateFrom, birthDateTo, gender, personStatuses, _callback);

    }

    /**
     * Search for a set of persons based on current information. Returns a search result with unique person ids, see HgdPerson.Out.OpenApi.Model.Person  The search result is limited to the provided page size and shifted by the provided index offset.
     * Search for a set of persons based on current information. Returns a search result with unique person ids, see Person  together with the results start and end index with can be further used to paginate the potential remainder of the total search result.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadNoLegalBasis
     * @param apiVersion The requested API version (required)
     * @param includeAinResults flag to determine if search results should include persons with alternate identification numbers (optional, default to false)
     * @param pageSize The maximum size of the returned result set. Defaults to 1000, max page size is 10000.  When the returned result set is less then the requested page size then you have reached the end of the total search result. (optional, default to 1000)
     * @param indexOffset The index offset for the search. A paged-match-list search will return both a startIndex and endIndex in the response.  If the number of search results is larger than the page size, the next portion of the result can be retrieved by setting the  index offset to the end index of the first result, plus one (endIndex + 1). (optional, default to 0)
     * @param fullName The whole or parts of a person&#39;s full name. Only letters are allowed, up to 600 characters.  The search string will be divided into separate search words, and these words can match  the start of any part of the person&#39;s full name, regardless of the order of search words.  Only the first three search words will be used. (optional)
     * @param givenName The whole or the first part of a person&#39;s given name.  Only letters are allowed, up to 200 characters. (optional)
     * @param middleName The whole or first part of a person&#39;s middle name.  Only letters are allowed, up to 200 characters. (optional)
     * @param familyName The whole or first part of a person&#39;s family name.  Only letters are allowed, up to 200 characters. (optional)
     * @param streetAddress The street address of the street where the person lives.  Contains of letters, house number, and house letter, up to 200 characters. (optional)
     * @param postalCode The postal code (postnummer) number where the person lives.  If provided, needs to be exactly four digits. (optional)
     * @param municipalityNumber The municipality number of the municipality the person lives in.  If provided, needs to be exactly four digits. (optional)
     * @param basicStatisticalUnit The basic statistical unit number of the basic statistical unit the person lives in.  If provided, needs to be exactly eight digits. (optional)
     * @param birthDateFrom Will return persons with a birthday equal to or higher than the given value.  The person&#39;s date of birth provided as a string, formatted as YYYY-MM-DD  Searching only by year (YYYY) or year and month (YYYY-MM) is also allowed. (optional)
     * @param birthDateTo Will return persons with a birthday equal to or lower than the given value.  The person&#39;s date of birth provided as a string, formatted as YYYY-MM-DD.  Searching only by year (YYYY) or year and month (YYYY-MM) is also allowed. (optional)
     * @param gender The person&#39;s gender (optional)
     * @param personStatuses The nature of the relationship/connection  to Norway and the National Population Registry (optional)
     * @return StringSearchResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Search result with a list of person ids </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public StringSearchResult apiNoLegalBasisSearchPagedMatchListPost(String apiVersion, Boolean includeAinResults, Integer pageSize, Integer indexOffset, String fullName, String givenName, String middleName, String familyName, String streetAddress, String postalCode, String municipalityNumber, String basicStatisticalUnit, String birthDateFrom, String birthDateTo, Gender gender, List<PersonStatusType> personStatuses) throws ApiException {
        ApiResponse<StringSearchResult> localVarResp = apiNoLegalBasisSearchPagedMatchListPostWithHttpInfo(apiVersion, includeAinResults, pageSize, indexOffset, fullName, givenName, middleName, familyName, streetAddress, postalCode, municipalityNumber, basicStatisticalUnit, birthDateFrom, birthDateTo, gender, personStatuses);
        return localVarResp.getData();
    }

    /**
     * Search for a set of persons based on current information. Returns a search result with unique person ids, see HgdPerson.Out.OpenApi.Model.Person  The search result is limited to the provided page size and shifted by the provided index offset.
     * Search for a set of persons based on current information. Returns a search result with unique person ids, see Person  together with the results start and end index with can be further used to paginate the potential remainder of the total search result.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadNoLegalBasis
     * @param apiVersion The requested API version (required)
     * @param includeAinResults flag to determine if search results should include persons with alternate identification numbers (optional, default to false)
     * @param pageSize The maximum size of the returned result set. Defaults to 1000, max page size is 10000.  When the returned result set is less then the requested page size then you have reached the end of the total search result. (optional, default to 1000)
     * @param indexOffset The index offset for the search. A paged-match-list search will return both a startIndex and endIndex in the response.  If the number of search results is larger than the page size, the next portion of the result can be retrieved by setting the  index offset to the end index of the first result, plus one (endIndex + 1). (optional, default to 0)
     * @param fullName The whole or parts of a person&#39;s full name. Only letters are allowed, up to 600 characters.  The search string will be divided into separate search words, and these words can match  the start of any part of the person&#39;s full name, regardless of the order of search words.  Only the first three search words will be used. (optional)
     * @param givenName The whole or the first part of a person&#39;s given name.  Only letters are allowed, up to 200 characters. (optional)
     * @param middleName The whole or first part of a person&#39;s middle name.  Only letters are allowed, up to 200 characters. (optional)
     * @param familyName The whole or first part of a person&#39;s family name.  Only letters are allowed, up to 200 characters. (optional)
     * @param streetAddress The street address of the street where the person lives.  Contains of letters, house number, and house letter, up to 200 characters. (optional)
     * @param postalCode The postal code (postnummer) number where the person lives.  If provided, needs to be exactly four digits. (optional)
     * @param municipalityNumber The municipality number of the municipality the person lives in.  If provided, needs to be exactly four digits. (optional)
     * @param basicStatisticalUnit The basic statistical unit number of the basic statistical unit the person lives in.  If provided, needs to be exactly eight digits. (optional)
     * @param birthDateFrom Will return persons with a birthday equal to or higher than the given value.  The person&#39;s date of birth provided as a string, formatted as YYYY-MM-DD  Searching only by year (YYYY) or year and month (YYYY-MM) is also allowed. (optional)
     * @param birthDateTo Will return persons with a birthday equal to or lower than the given value.  The person&#39;s date of birth provided as a string, formatted as YYYY-MM-DD.  Searching only by year (YYYY) or year and month (YYYY-MM) is also allowed. (optional)
     * @param gender The person&#39;s gender (optional)
     * @param personStatuses The nature of the relationship/connection  to Norway and the National Population Registry (optional)
     * @return ApiResponse&lt;StringSearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Search result with a list of person ids </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StringSearchResult> apiNoLegalBasisSearchPagedMatchListPostWithHttpInfo(String apiVersion, Boolean includeAinResults, Integer pageSize, Integer indexOffset, String fullName, String givenName, String middleName, String familyName, String streetAddress, String postalCode, String municipalityNumber, String basicStatisticalUnit, String birthDateFrom, String birthDateTo, Gender gender, List<PersonStatusType> personStatuses) throws ApiException {
        okhttp3.Call localVarCall = apiNoLegalBasisSearchPagedMatchListPostValidateBeforeCall(apiVersion, includeAinResults, pageSize, indexOffset, fullName, givenName, middleName, familyName, streetAddress, postalCode, municipalityNumber, basicStatisticalUnit, birthDateFrom, birthDateTo, gender, personStatuses, null);
        Type localVarReturnType = new TypeToken<StringSearchResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search for a set of persons based on current information. Returns a search result with unique person ids, see HgdPerson.Out.OpenApi.Model.Person  The search result is limited to the provided page size and shifted by the provided index offset. (asynchronously)
     * Search for a set of persons based on current information. Returns a search result with unique person ids, see Person  together with the results start and end index with can be further used to paginate the potential remainder of the total search result.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadNoLegalBasis
     * @param apiVersion The requested API version (required)
     * @param includeAinResults flag to determine if search results should include persons with alternate identification numbers (optional, default to false)
     * @param pageSize The maximum size of the returned result set. Defaults to 1000, max page size is 10000.  When the returned result set is less then the requested page size then you have reached the end of the total search result. (optional, default to 1000)
     * @param indexOffset The index offset for the search. A paged-match-list search will return both a startIndex and endIndex in the response.  If the number of search results is larger than the page size, the next portion of the result can be retrieved by setting the  index offset to the end index of the first result, plus one (endIndex + 1). (optional, default to 0)
     * @param fullName The whole or parts of a person&#39;s full name. Only letters are allowed, up to 600 characters.  The search string will be divided into separate search words, and these words can match  the start of any part of the person&#39;s full name, regardless of the order of search words.  Only the first three search words will be used. (optional)
     * @param givenName The whole or the first part of a person&#39;s given name.  Only letters are allowed, up to 200 characters. (optional)
     * @param middleName The whole or first part of a person&#39;s middle name.  Only letters are allowed, up to 200 characters. (optional)
     * @param familyName The whole or first part of a person&#39;s family name.  Only letters are allowed, up to 200 characters. (optional)
     * @param streetAddress The street address of the street where the person lives.  Contains of letters, house number, and house letter, up to 200 characters. (optional)
     * @param postalCode The postal code (postnummer) number where the person lives.  If provided, needs to be exactly four digits. (optional)
     * @param municipalityNumber The municipality number of the municipality the person lives in.  If provided, needs to be exactly four digits. (optional)
     * @param basicStatisticalUnit The basic statistical unit number of the basic statistical unit the person lives in.  If provided, needs to be exactly eight digits. (optional)
     * @param birthDateFrom Will return persons with a birthday equal to or higher than the given value.  The person&#39;s date of birth provided as a string, formatted as YYYY-MM-DD  Searching only by year (YYYY) or year and month (YYYY-MM) is also allowed. (optional)
     * @param birthDateTo Will return persons with a birthday equal to or lower than the given value.  The person&#39;s date of birth provided as a string, formatted as YYYY-MM-DD.  Searching only by year (YYYY) or year and month (YYYY-MM) is also allowed. (optional)
     * @param gender The person&#39;s gender (optional)
     * @param personStatuses The nature of the relationship/connection  to Norway and the National Population Registry (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Search result with a list of person ids </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiNoLegalBasisSearchPagedMatchListPostAsync(String apiVersion, Boolean includeAinResults, Integer pageSize, Integer indexOffset, String fullName, String givenName, String middleName, String familyName, String streetAddress, String postalCode, String municipalityNumber, String basicStatisticalUnit, String birthDateFrom, String birthDateTo, Gender gender, List<PersonStatusType> personStatuses, final ApiCallback<StringSearchResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiNoLegalBasisSearchPagedMatchListPostValidateBeforeCall(apiVersion, includeAinResults, pageSize, indexOffset, fullName, givenName, middleName, familyName, streetAddress, postalCode, municipalityNumber, basicStatisticalUnit, birthDateFrom, birthDateTo, gender, personStatuses, _callback);
        Type localVarReturnType = new TypeToken<StringSearchResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiNoLegalBasisSearchPersonPost
     * @param informationParts Which information parts that should be included in the result (required)
     * @param apiVersion The requested API version (required)
     * @param includeHistory Flag to indicate if response should include historic information, defaults to false (optional, default to false)
     * @param includeAinResults flag to determine if search results should include persons with alternate identification numbers (optional, default to false)
     * @param birthDate The person&#39;s date of birth provided as a string, formatted as YYYY-MM-DD.  Searching only by year (YYYY) or year and month (YYYY-MM) is also allowed. (optional)
     * @param gender The person&#39;s gender (optional)
     * @param fullName The whole or parts of a person&#39;s full name. Only letters are allowed, up to 600 characters.  The search string will be divided into separate search words, and these words can match  the start of any part of the person&#39;s full name, regardless of the order of search words.  Only the first three search words will be used. (optional)
     * @param givenName The whole or the first part of a person&#39;s given name.  Only letters are allowed, up to 200 characters. (optional)
     * @param middleName The whole or first part of a person&#39;s middle name.  Only letters are allowed, up to 200 characters. (optional)
     * @param familyName The whole or first part of a person&#39;s family name.  Only letters are allowed, up to 200 characters. (optional)
     * @param streetAddress The street address of the street where the person lives.  Contains of letters, housenumber, and houseletter, up to 200 characters. (optional)
     * @param postalCode The postal code (postnummer) number where the person lives.  If provided, needs to be exactly four digits. (optional)
     * @param cityName The city name (poststed) of the city the person lives in.  Only letters allowed, up to 100 characters (optional)
     * @param municipalityNumber The municipality number of the municipality the person lives in.  If provided, needs to be exactly four digits. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Search result with a list of person documents </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden, invalid scope </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiNoLegalBasisSearchPersonPostCall(List<InformationPart> informationParts, String apiVersion, Boolean includeHistory, Boolean includeAinResults, String birthDate, Gender gender, String fullName, String givenName, String middleName, String familyName, String streetAddress, String postalCode, String cityName, String municipalityNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/no-legal-basis/search/person";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (birthDate != null) {
            localVarFormParams.put("BirthDate", birthDate);
        }

        if (gender != null) {
            localVarFormParams.put("Gender", gender);
        }

        if (fullName != null) {
            localVarFormParams.put("FullName", fullName);
        }

        if (givenName != null) {
            localVarFormParams.put("GivenName", givenName);
        }

        if (middleName != null) {
            localVarFormParams.put("MiddleName", middleName);
        }

        if (familyName != null) {
            localVarFormParams.put("FamilyName", familyName);
        }

        if (streetAddress != null) {
            localVarFormParams.put("StreetAddress", streetAddress);
        }

        if (postalCode != null) {
            localVarFormParams.put("PostalCode", postalCode);
        }

        if (cityName != null) {
            localVarFormParams.put("CityName", cityName);
        }

        if (municipalityNumber != null) {
            localVarFormParams.put("MunicipalityNumber", municipalityNumber);
        }

        if (informationParts != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "informationParts", informationParts));
        }

        if (includeHistory != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeHistory", includeHistory));
        }

        if (includeAinResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeAinResults", includeAinResults));
        }

        if (apiVersion != null) {
            localVarHeaderParams.put("api-version", localVarApiClient.parameterToString(apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HelseID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiNoLegalBasisSearchPersonPostValidateBeforeCall(List<InformationPart> informationParts, String apiVersion, Boolean includeHistory, Boolean includeAinResults, String birthDate, Gender gender, String fullName, String givenName, String middleName, String familyName, String streetAddress, String postalCode, String cityName, String municipalityNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'informationParts' is set
        if (informationParts == null) {
            throw new ApiException("Missing the required parameter 'informationParts' when calling apiNoLegalBasisSearchPersonPost(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling apiNoLegalBasisSearchPersonPost(Async)");
        }

        return apiNoLegalBasisSearchPersonPostCall(informationParts, apiVersion, includeHistory, includeAinResults, birthDate, gender, fullName, givenName, middleName, familyName, streetAddress, postalCode, cityName, municipalityNumber, _callback);

    }

    /**
     * Search for a limited set of persons based on current information. Returns a search result with max 100 person documents.
     * Search parameters will match current information, historic information will not be searchable.  For addresses, it&#39;s possible to search for norwegian residential, present and shared residence addresses.                Search parameters have the following requirements:  &lt;br&gt;1. A value for either FirstName, MiddleName, LastName or FullName&lt;br&gt;2. Combined across all names, there must be at least three letters in total (whitespace is not counted)&lt;br&gt;3. DateOfBirth OR MunicipalityNumber with at least 4 digits OR StreetName with at least three letters (whitespace is not counted)&lt;br&gt;Some search parameters are also validated individually, see the search parameter description for more details.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadNoLegalBasis
     * @param informationParts Which information parts that should be included in the result (required)
     * @param apiVersion The requested API version (required)
     * @param includeHistory Flag to indicate if response should include historic information, defaults to false (optional, default to false)
     * @param includeAinResults flag to determine if search results should include persons with alternate identification numbers (optional, default to false)
     * @param birthDate The person&#39;s date of birth provided as a string, formatted as YYYY-MM-DD.  Searching only by year (YYYY) or year and month (YYYY-MM) is also allowed. (optional)
     * @param gender The person&#39;s gender (optional)
     * @param fullName The whole or parts of a person&#39;s full name. Only letters are allowed, up to 600 characters.  The search string will be divided into separate search words, and these words can match  the start of any part of the person&#39;s full name, regardless of the order of search words.  Only the first three search words will be used. (optional)
     * @param givenName The whole or the first part of a person&#39;s given name.  Only letters are allowed, up to 200 characters. (optional)
     * @param middleName The whole or first part of a person&#39;s middle name.  Only letters are allowed, up to 200 characters. (optional)
     * @param familyName The whole or first part of a person&#39;s family name.  Only letters are allowed, up to 200 characters. (optional)
     * @param streetAddress The street address of the street where the person lives.  Contains of letters, housenumber, and houseletter, up to 200 characters. (optional)
     * @param postalCode The postal code (postnummer) number where the person lives.  If provided, needs to be exactly four digits. (optional)
     * @param cityName The city name (poststed) of the city the person lives in.  Only letters allowed, up to 100 characters (optional)
     * @param municipalityNumber The municipality number of the municipality the person lives in.  If provided, needs to be exactly four digits. (optional)
     * @return PersonSearchResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Search result with a list of person documents </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden, invalid scope </td><td>  -  </td></tr>
     </table>
     */
    public PersonSearchResult apiNoLegalBasisSearchPersonPost(List<InformationPart> informationParts, String apiVersion, Boolean includeHistory, Boolean includeAinResults, String birthDate, Gender gender, String fullName, String givenName, String middleName, String familyName, String streetAddress, String postalCode, String cityName, String municipalityNumber) throws ApiException {
        ApiResponse<PersonSearchResult> localVarResp = apiNoLegalBasisSearchPersonPostWithHttpInfo(informationParts, apiVersion, includeHistory, includeAinResults, birthDate, gender, fullName, givenName, middleName, familyName, streetAddress, postalCode, cityName, municipalityNumber);
        return localVarResp.getData();
    }

    /**
     * Search for a limited set of persons based on current information. Returns a search result with max 100 person documents.
     * Search parameters will match current information, historic information will not be searchable.  For addresses, it&#39;s possible to search for norwegian residential, present and shared residence addresses.                Search parameters have the following requirements:  &lt;br&gt;1. A value for either FirstName, MiddleName, LastName or FullName&lt;br&gt;2. Combined across all names, there must be at least three letters in total (whitespace is not counted)&lt;br&gt;3. DateOfBirth OR MunicipalityNumber with at least 4 digits OR StreetName with at least three letters (whitespace is not counted)&lt;br&gt;Some search parameters are also validated individually, see the search parameter description for more details.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadNoLegalBasis
     * @param informationParts Which information parts that should be included in the result (required)
     * @param apiVersion The requested API version (required)
     * @param includeHistory Flag to indicate if response should include historic information, defaults to false (optional, default to false)
     * @param includeAinResults flag to determine if search results should include persons with alternate identification numbers (optional, default to false)
     * @param birthDate The person&#39;s date of birth provided as a string, formatted as YYYY-MM-DD.  Searching only by year (YYYY) or year and month (YYYY-MM) is also allowed. (optional)
     * @param gender The person&#39;s gender (optional)
     * @param fullName The whole or parts of a person&#39;s full name. Only letters are allowed, up to 600 characters.  The search string will be divided into separate search words, and these words can match  the start of any part of the person&#39;s full name, regardless of the order of search words.  Only the first three search words will be used. (optional)
     * @param givenName The whole or the first part of a person&#39;s given name.  Only letters are allowed, up to 200 characters. (optional)
     * @param middleName The whole or first part of a person&#39;s middle name.  Only letters are allowed, up to 200 characters. (optional)
     * @param familyName The whole or first part of a person&#39;s family name.  Only letters are allowed, up to 200 characters. (optional)
     * @param streetAddress The street address of the street where the person lives.  Contains of letters, housenumber, and houseletter, up to 200 characters. (optional)
     * @param postalCode The postal code (postnummer) number where the person lives.  If provided, needs to be exactly four digits. (optional)
     * @param cityName The city name (poststed) of the city the person lives in.  Only letters allowed, up to 100 characters (optional)
     * @param municipalityNumber The municipality number of the municipality the person lives in.  If provided, needs to be exactly four digits. (optional)
     * @return ApiResponse&lt;PersonSearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Search result with a list of person documents </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden, invalid scope </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PersonSearchResult> apiNoLegalBasisSearchPersonPostWithHttpInfo(List<InformationPart> informationParts, String apiVersion, Boolean includeHistory, Boolean includeAinResults, String birthDate, Gender gender, String fullName, String givenName, String middleName, String familyName, String streetAddress, String postalCode, String cityName, String municipalityNumber) throws ApiException {
        okhttp3.Call localVarCall = apiNoLegalBasisSearchPersonPostValidateBeforeCall(informationParts, apiVersion, includeHistory, includeAinResults, birthDate, gender, fullName, givenName, middleName, familyName, streetAddress, postalCode, cityName, municipalityNumber, null);
        Type localVarReturnType = new TypeToken<PersonSearchResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search for a limited set of persons based on current information. Returns a search result with max 100 person documents. (asynchronously)
     * Search parameters will match current information, historic information will not be searchable.  For addresses, it&#39;s possible to search for norwegian residential, present and shared residence addresses.                Search parameters have the following requirements:  &lt;br&gt;1. A value for either FirstName, MiddleName, LastName or FullName&lt;br&gt;2. Combined across all names, there must be at least three letters in total (whitespace is not counted)&lt;br&gt;3. DateOfBirth OR MunicipalityNumber with at least 4 digits OR StreetName with at least three letters (whitespace is not counted)&lt;br&gt;Some search parameters are also validated individually, see the search parameter description for more details.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadNoLegalBasis
     * @param informationParts Which information parts that should be included in the result (required)
     * @param apiVersion The requested API version (required)
     * @param includeHistory Flag to indicate if response should include historic information, defaults to false (optional, default to false)
     * @param includeAinResults flag to determine if search results should include persons with alternate identification numbers (optional, default to false)
     * @param birthDate The person&#39;s date of birth provided as a string, formatted as YYYY-MM-DD.  Searching only by year (YYYY) or year and month (YYYY-MM) is also allowed. (optional)
     * @param gender The person&#39;s gender (optional)
     * @param fullName The whole or parts of a person&#39;s full name. Only letters are allowed, up to 600 characters.  The search string will be divided into separate search words, and these words can match  the start of any part of the person&#39;s full name, regardless of the order of search words.  Only the first three search words will be used. (optional)
     * @param givenName The whole or the first part of a person&#39;s given name.  Only letters are allowed, up to 200 characters. (optional)
     * @param middleName The whole or first part of a person&#39;s middle name.  Only letters are allowed, up to 200 characters. (optional)
     * @param familyName The whole or first part of a person&#39;s family name.  Only letters are allowed, up to 200 characters. (optional)
     * @param streetAddress The street address of the street where the person lives.  Contains of letters, housenumber, and houseletter, up to 200 characters. (optional)
     * @param postalCode The postal code (postnummer) number where the person lives.  If provided, needs to be exactly four digits. (optional)
     * @param cityName The city name (poststed) of the city the person lives in.  Only letters allowed, up to 100 characters (optional)
     * @param municipalityNumber The municipality number of the municipality the person lives in.  If provided, needs to be exactly four digits. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Search result with a list of person documents </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden, invalid scope </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiNoLegalBasisSearchPersonPostAsync(List<InformationPart> informationParts, String apiVersion, Boolean includeHistory, Boolean includeAinResults, String birthDate, Gender gender, String fullName, String givenName, String middleName, String familyName, String streetAddress, String postalCode, String cityName, String municipalityNumber, final ApiCallback<PersonSearchResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiNoLegalBasisSearchPersonPostValidateBeforeCall(informationParts, apiVersion, includeHistory, includeAinResults, birthDate, gender, fullName, givenName, middleName, familyName, streetAddress, postalCode, cityName, municipalityNumber, _callback);
        Type localVarReturnType = new TypeToken<PersonSearchResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
