/*
 * Persontjenesten API - ET
 * The Person API provides information on norwegian citizens for the norwegian public health sector, and is maintained by [Norsk helsenett](https://www.nhn.no/).  An API changelog is available [here](../static/changelog/index.html).  For more documentation and a complete integration guide, see the [NHN developer portal](https://utviklerportal.nhn.no/informasjonstjenester/persontjenesten/). 
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CommonContactRegisterInformationContactInformation;
import org.openapitools.client.model.CommonContactRegisterInformationDigitalPost;
import org.openapitools.client.model.NotificationStatus;
import org.openapitools.client.model.Reservation;
import org.openapitools.client.model.Status;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contact Register Information for a person  Data is from the Contact and Reservation Register (KRR)
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-30T07:50:48.244395087Z[Etc/UTC]", comments = "Generator version: 7.7.0-SNAPSHOT")
public class PersonCommonContactRegisterInformation {
  public static final String SERIALIZED_NAME_RESERVATION = "reservation";
  @SerializedName(SERIALIZED_NAME_RESERVATION)
  private Reservation reservation;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Status status;

  public static final String SERIALIZED_NAME_NOTIFICATION_STATUS = "notificationStatus";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_STATUS)
  private NotificationStatus notificationStatus;

  public static final String SERIALIZED_NAME_CONTACT_INFORMATION = "contactInformation";
  @SerializedName(SERIALIZED_NAME_CONTACT_INFORMATION)
  private CommonContactRegisterInformationContactInformation contactInformation;

  public static final String SERIALIZED_NAME_DIGITAL_POST = "digitalPost";
  @SerializedName(SERIALIZED_NAME_DIGITAL_POST)
  private CommonContactRegisterInformationDigitalPost digitalPost;

  public static final String SERIALIZED_NAME_CERTIFICATE = "certificate";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE)
  private String certificate;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private String language;

  public static final String SERIALIZED_NAME_LANGUAGE_LAST_UPDATED = "languageLastUpdated";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_LAST_UPDATED)
  private String languageLastUpdated;

  public PersonCommonContactRegisterInformation() {
  }

  public PersonCommonContactRegisterInformation reservation(Reservation reservation) {
    this.reservation = reservation;
    return this;
  }

   /**
   * &lt;br&gt;KRR: reservasjon              Reservation given by a person, used in accordance to eForvaltningsforskriften ยง 15 a.
   * @return reservation
  **/
  @javax.annotation.Nullable
  public Reservation getReservation() {
    return reservation;
  }

  public void setReservation(Reservation reservation) {
    this.reservation = reservation;
  }


  public PersonCommonContactRegisterInformation status(Status status) {
    this.status = status;
    return this;
  }

   /**
   * &lt;br&gt;KRR: status              The status of a person
   * @return status
  **/
  @javax.annotation.Nullable
  public Status getStatus() {
    return status;
  }

  public void setStatus(Status status) {
    this.status = status;
  }


  public PersonCommonContactRegisterInformation notificationStatus(NotificationStatus notificationStatus) {
    this.notificationStatus = notificationStatus;
    return this;
  }

   /**
   * &lt;br&gt;KRR: varslingsstatus              Describes if a person can be notified or not
   * @return notificationStatus
  **/
  @javax.annotation.Nullable
  public NotificationStatus getNotificationStatus() {
    return notificationStatus;
  }

  public void setNotificationStatus(NotificationStatus notificationStatus) {
    this.notificationStatus = notificationStatus;
  }


  public PersonCommonContactRegisterInformation contactInformation(CommonContactRegisterInformationContactInformation contactInformation) {
    this.contactInformation = contactInformation;
    return this;
  }

   /**
   * Get contactInformation
   * @return contactInformation
  **/
  @javax.annotation.Nullable
  public CommonContactRegisterInformationContactInformation getContactInformation() {
    return contactInformation;
  }

  public void setContactInformation(CommonContactRegisterInformationContactInformation contactInformation) {
    this.contactInformation = contactInformation;
  }


  public PersonCommonContactRegisterInformation digitalPost(CommonContactRegisterInformationDigitalPost digitalPost) {
    this.digitalPost = digitalPost;
    return this;
  }

   /**
   * Get digitalPost
   * @return digitalPost
  **/
  @javax.annotation.Nullable
  public CommonContactRegisterInformationDigitalPost getDigitalPost() {
    return digitalPost;
  }

  public void setDigitalPost(CommonContactRegisterInformationDigitalPost digitalPost) {
    this.digitalPost = digitalPost;
  }


  public PersonCommonContactRegisterInformation certificate(String certificate) {
    this.certificate = certificate;
    return this;
  }

   /**
   * &lt;br&gt;KRR: sertifikat              Person certificate for digital post
   * @return certificate
  **/
  @javax.annotation.Nullable
  public String getCertificate() {
    return certificate;
  }

  public void setCertificate(String certificate) {
    this.certificate = certificate;
  }


  public PersonCommonContactRegisterInformation language(String language) {
    this.language = language;
    return this;
  }

   /**
   * &lt;br&gt;KRR: spraak              Persons preferred language for communication with the public
   * @return language
  **/
  @javax.annotation.Nullable
  public String getLanguage() {
    return language;
  }

  public void setLanguage(String language) {
    this.language = language;
  }


  public PersonCommonContactRegisterInformation languageLastUpdated(String languageLastUpdated) {
    this.languageLastUpdated = languageLastUpdated;
    return this;
  }

   /**
   * &lt;br&gt;KRR: spraak_oppdatert              Last time language choice was updated
   * @return languageLastUpdated
  **/
  @javax.annotation.Nullable
  public String getLanguageLastUpdated() {
    return languageLastUpdated;
  }

  public void setLanguageLastUpdated(String languageLastUpdated) {
    this.languageLastUpdated = languageLastUpdated;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PersonCommonContactRegisterInformation personCommonContactRegisterInformation = (PersonCommonContactRegisterInformation) o;
    return Objects.equals(this.reservation, personCommonContactRegisterInformation.reservation) &&
        Objects.equals(this.status, personCommonContactRegisterInformation.status) &&
        Objects.equals(this.notificationStatus, personCommonContactRegisterInformation.notificationStatus) &&
        Objects.equals(this.contactInformation, personCommonContactRegisterInformation.contactInformation) &&
        Objects.equals(this.digitalPost, personCommonContactRegisterInformation.digitalPost) &&
        Objects.equals(this.certificate, personCommonContactRegisterInformation.certificate) &&
        Objects.equals(this.language, personCommonContactRegisterInformation.language) &&
        Objects.equals(this.languageLastUpdated, personCommonContactRegisterInformation.languageLastUpdated);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(reservation, status, notificationStatus, contactInformation, digitalPost, certificate, language, languageLastUpdated);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PersonCommonContactRegisterInformation {\n");
    sb.append("    reservation: ").append(toIndentedString(reservation)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    notificationStatus: ").append(toIndentedString(notificationStatus)).append("\n");
    sb.append("    contactInformation: ").append(toIndentedString(contactInformation)).append("\n");
    sb.append("    digitalPost: ").append(toIndentedString(digitalPost)).append("\n");
    sb.append("    certificate: ").append(toIndentedString(certificate)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    languageLastUpdated: ").append(toIndentedString(languageLastUpdated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("reservation");
    openapiFields.add("status");
    openapiFields.add("notificationStatus");
    openapiFields.add("contactInformation");
    openapiFields.add("digitalPost");
    openapiFields.add("certificate");
    openapiFields.add("language");
    openapiFields.add("languageLastUpdated");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to PersonCommonContactRegisterInformation
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PersonCommonContactRegisterInformation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PersonCommonContactRegisterInformation is not found in the empty JSON string", PersonCommonContactRegisterInformation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PersonCommonContactRegisterInformation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PersonCommonContactRegisterInformation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `reservation`
      if (jsonObj.get("reservation") != null && !jsonObj.get("reservation").isJsonNull()) {
        Reservation.validateJsonElement(jsonObj.get("reservation"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        Status.validateJsonElement(jsonObj.get("status"));
      }
      // validate the optional field `notificationStatus`
      if (jsonObj.get("notificationStatus") != null && !jsonObj.get("notificationStatus").isJsonNull()) {
        NotificationStatus.validateJsonElement(jsonObj.get("notificationStatus"));
      }
      // validate the optional field `contactInformation`
      if (jsonObj.get("contactInformation") != null && !jsonObj.get("contactInformation").isJsonNull()) {
        CommonContactRegisterInformationContactInformation.validateJsonElement(jsonObj.get("contactInformation"));
      }
      // validate the optional field `digitalPost`
      if (jsonObj.get("digitalPost") != null && !jsonObj.get("digitalPost").isJsonNull()) {
        CommonContactRegisterInformationDigitalPost.validateJsonElement(jsonObj.get("digitalPost"));
      }
      if ((jsonObj.get("certificate") != null && !jsonObj.get("certificate").isJsonNull()) && !jsonObj.get("certificate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `certificate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("certificate").toString()));
      }
      if ((jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) && !jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      if ((jsonObj.get("languageLastUpdated") != null && !jsonObj.get("languageLastUpdated").isJsonNull()) && !jsonObj.get("languageLastUpdated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `languageLastUpdated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("languageLastUpdated").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PersonCommonContactRegisterInformation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PersonCommonContactRegisterInformation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PersonCommonContactRegisterInformation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PersonCommonContactRegisterInformation.class));

       return (TypeAdapter<T>) new TypeAdapter<PersonCommonContactRegisterInformation>() {
           @Override
           public void write(JsonWriter out, PersonCommonContactRegisterInformation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PersonCommonContactRegisterInformation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PersonCommonContactRegisterInformation given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PersonCommonContactRegisterInformation
  * @throws IOException if the JSON string is invalid with respect to PersonCommonContactRegisterInformation
  */
  public static PersonCommonContactRegisterInformation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PersonCommonContactRegisterInformation.class);
  }

 /**
  * Convert an instance of PersonCommonContactRegisterInformation to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

