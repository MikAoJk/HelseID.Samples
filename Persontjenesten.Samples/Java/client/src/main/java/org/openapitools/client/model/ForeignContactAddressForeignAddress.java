/*
 * Persontjenesten API - ET
 * The Person API provides information on norwegian citizens for the norwegian public health sector, and is maintained by [Norsk helsenett](https://www.nhn.no/).  An API changelog is available [here](../static/changelog/index.html).  For more documentation and a complete integration guide, see the [NHN developer portal](https://utviklerportal.nhn.no/informasjonstjenester/persontjenesten/). 
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;br&gt;FREG: UtenlandskAdresse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-30T07:50:48.244395087Z[Etc/UTC]", comments = "Generator version: 7.7.0-SNAPSHOT")
public class ForeignContactAddressForeignAddress {
  public static final String SERIALIZED_NAME_CO_ADDRESS_NAME = "coAddressName";
  @SerializedName(SERIALIZED_NAME_CO_ADDRESS_NAME)
  private String coAddressName;

  public static final String SERIALIZED_NAME_ADDRESS_NAME = "addressName";
  @SerializedName(SERIALIZED_NAME_ADDRESS_NAME)
  private String addressName;

  public static final String SERIALIZED_NAME_BUILDING = "building";
  @SerializedName(SERIALIZED_NAME_BUILDING)
  private String building;

  public static final String SERIALIZED_NAME_FLOOR_NUMBER = "floorNumber";
  @SerializedName(SERIALIZED_NAME_FLOOR_NUMBER)
  private String floorNumber;

  public static final String SERIALIZED_NAME_HOUSING_UNIT = "housingUnit";
  @SerializedName(SERIALIZED_NAME_HOUSING_UNIT)
  private String housingUnit;

  public static final String SERIALIZED_NAME_POST_BOX = "postBox";
  @SerializedName(SERIALIZED_NAME_POST_BOX)
  private String postBox;

  public static final String SERIALIZED_NAME_POST_CODE = "postCode";
  @SerializedName(SERIALIZED_NAME_POST_CODE)
  private String postCode;

  public static final String SERIALIZED_NAME_CITY_OR_PLACE_NAME = "cityOrPlaceName";
  @SerializedName(SERIALIZED_NAME_CITY_OR_PLACE_NAME)
  private String cityOrPlaceName;

  public static final String SERIALIZED_NAME_DISTRICT_NAME = "districtName";
  @SerializedName(SERIALIZED_NAME_DISTRICT_NAME)
  private String districtName;

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private String region;

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "countryCode";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public ForeignContactAddressForeignAddress() {
  }

  public ForeignContactAddressForeignAddress coAddressName(String coAddressName) {
    this.coAddressName = coAddressName;
    return this;
  }

   /**
   * Description of who the recipient is in care of (C/O),  or which recipient in an organization (v/ &#x3D; with, or Att: &#x3D; \&quot;Attention\&quot;)  &lt;br&gt;FREG: CoAdressenavn
   * @return coAddressName
  **/
  @javax.annotation.Nullable
  public String getCoAddressName() {
    return coAddressName;
  }

  public void setCoAddressName(String coAddressName) {
    this.coAddressName = coAddressName;
  }


  public ForeignContactAddressForeignAddress addressName(String addressName) {
    this.addressName = addressName;
    return this;
  }

   /**
   * Name of a street, road, path, place or area  as registered in the cadastral of a municipality  &lt;br&gt;Remarks:   Address number (housing number and lettering) may be included  Freg: Adressenavn
   * @return addressName
  **/
  @javax.annotation.Nullable
  public String getAddressName() {
    return addressName;
  }

  public void setAddressName(String addressName) {
    this.addressName = addressName;
  }


  public ForeignContactAddressForeignAddress building(String building) {
    this.building = building;
    return this;
  }

   /**
   * Describes name and/or number of a building  &lt;br&gt;FREG: Bygning
   * @return building
  **/
  @javax.annotation.Nullable
  public String getBuilding() {
    return building;
  }

  public void setBuilding(String building) {
    this.building = building;
  }


  public ForeignContactAddressForeignAddress floorNumber(String floorNumber) {
    this.floorNumber = floorNumber;
    return this;
  }

   /**
   * Described which floor the registered address is located in  &lt;br&gt;FREG: Etasjenummer
   * @return floorNumber
  **/
  @javax.annotation.Nullable
  public String getFloorNumber() {
    return floorNumber;
  }

  public void setFloorNumber(String floorNumber) {
    this.floorNumber = floorNumber;
  }


  public ForeignContactAddressForeignAddress housingUnit(String housingUnit) {
    this.housingUnit = housingUnit;
    return this;
  }

   /**
   * Address property describing what kind of habitat or  business is registered, and a unique identifier within  the building / floor  &lt;br&gt;FREG: Boenhet
   * @return housingUnit
  **/
  @javax.annotation.Nullable
  public String getHousingUnit() {
    return housingUnit;
  }

  public void setHousingUnit(String housingUnit) {
    this.housingUnit = housingUnit;
  }


  public ForeignContactAddressForeignAddress postBox(String postBox) {
    this.postBox = postBox;
    return this;
  }

   /**
   * Post box identifier  &lt;br&gt;FREG: Postboks
   * @return postBox
  **/
  @javax.annotation.Nullable
  public String getPostBox() {
    return postBox;
  }

  public void setPostBox(String postBox) {
    this.postBox = postBox;
  }


  public ForeignContactAddressForeignAddress postCode(String postCode) {
    this.postCode = postCode;
    return this;
  }

   /**
   * Post code / zip code for each post area  &lt;br&gt;FREG: Postkode
   * @return postCode
  **/
  @javax.annotation.Nullable
  public String getPostCode() {
    return postCode;
  }

  public void setPostCode(String postCode) {
    this.postCode = postCode;
  }


  public ForeignContactAddressForeignAddress cityOrPlaceName(String cityOrPlaceName) {
    this.cityOrPlaceName = cityOrPlaceName;
    return this;
  }

   /**
   * Name of place or city  &lt;br&gt;FREG: ByEllerStedsnavn
   * @return cityOrPlaceName
  **/
  @javax.annotation.Nullable
  public String getCityOrPlaceName() {
    return cityOrPlaceName;
  }

  public void setCityOrPlaceName(String cityOrPlaceName) {
    this.cityOrPlaceName = cityOrPlaceName;
  }


  public ForeignContactAddressForeignAddress districtName(String districtName) {
    this.districtName = districtName;
    return this;
  }

   /**
   * District inside a country or part of a city  &lt;br&gt;FREG: Distriktsnavn
   * @return districtName
  **/
  @javax.annotation.Nullable
  public String getDistrictName() {
    return districtName;
  }

  public void setDistrictName(String districtName) {
    this.districtName = districtName;
  }


  public ForeignContactAddressForeignAddress region(String region) {
    this.region = region;
    return this;
  }

   /**
   * Large geographical area part of a country  &lt;br&gt;FREG: Region
   * @return region
  **/
  @javax.annotation.Nullable
  public String getRegion() {
    return region;
  }

  public void setRegion(String region) {
    this.region = region;
  }


  public ForeignContactAddressForeignAddress countryCode(String countryCode) {
    this.countryCode = countryCode;
    return this;
  }

   /**
   * 2 letter Code used to represent a country  &lt;br&gt;Remarks:   Uses ISO 3166-1 Alpha 2. XK &#x3D; Kosovo.  Freg: Landkode
   * @return countryCode
  **/
  @javax.annotation.Nullable
  public String getCountryCode() {
    return countryCode;
  }

  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ForeignContactAddressForeignAddress foreignContactAddressForeignAddress = (ForeignContactAddressForeignAddress) o;
    return Objects.equals(this.coAddressName, foreignContactAddressForeignAddress.coAddressName) &&
        Objects.equals(this.addressName, foreignContactAddressForeignAddress.addressName) &&
        Objects.equals(this.building, foreignContactAddressForeignAddress.building) &&
        Objects.equals(this.floorNumber, foreignContactAddressForeignAddress.floorNumber) &&
        Objects.equals(this.housingUnit, foreignContactAddressForeignAddress.housingUnit) &&
        Objects.equals(this.postBox, foreignContactAddressForeignAddress.postBox) &&
        Objects.equals(this.postCode, foreignContactAddressForeignAddress.postCode) &&
        Objects.equals(this.cityOrPlaceName, foreignContactAddressForeignAddress.cityOrPlaceName) &&
        Objects.equals(this.districtName, foreignContactAddressForeignAddress.districtName) &&
        Objects.equals(this.region, foreignContactAddressForeignAddress.region) &&
        Objects.equals(this.countryCode, foreignContactAddressForeignAddress.countryCode);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(coAddressName, addressName, building, floorNumber, housingUnit, postBox, postCode, cityOrPlaceName, districtName, region, countryCode);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ForeignContactAddressForeignAddress {\n");
    sb.append("    coAddressName: ").append(toIndentedString(coAddressName)).append("\n");
    sb.append("    addressName: ").append(toIndentedString(addressName)).append("\n");
    sb.append("    building: ").append(toIndentedString(building)).append("\n");
    sb.append("    floorNumber: ").append(toIndentedString(floorNumber)).append("\n");
    sb.append("    housingUnit: ").append(toIndentedString(housingUnit)).append("\n");
    sb.append("    postBox: ").append(toIndentedString(postBox)).append("\n");
    sb.append("    postCode: ").append(toIndentedString(postCode)).append("\n");
    sb.append("    cityOrPlaceName: ").append(toIndentedString(cityOrPlaceName)).append("\n");
    sb.append("    districtName: ").append(toIndentedString(districtName)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("coAddressName");
    openapiFields.add("addressName");
    openapiFields.add("building");
    openapiFields.add("floorNumber");
    openapiFields.add("housingUnit");
    openapiFields.add("postBox");
    openapiFields.add("postCode");
    openapiFields.add("cityOrPlaceName");
    openapiFields.add("districtName");
    openapiFields.add("region");
    openapiFields.add("countryCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ForeignContactAddressForeignAddress
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ForeignContactAddressForeignAddress.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ForeignContactAddressForeignAddress is not found in the empty JSON string", ForeignContactAddressForeignAddress.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ForeignContactAddressForeignAddress.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ForeignContactAddressForeignAddress` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("coAddressName") != null && !jsonObj.get("coAddressName").isJsonNull()) && !jsonObj.get("coAddressName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `coAddressName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("coAddressName").toString()));
      }
      if ((jsonObj.get("addressName") != null && !jsonObj.get("addressName").isJsonNull()) && !jsonObj.get("addressName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addressName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addressName").toString()));
      }
      if ((jsonObj.get("building") != null && !jsonObj.get("building").isJsonNull()) && !jsonObj.get("building").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `building` to be a primitive type in the JSON string but got `%s`", jsonObj.get("building").toString()));
      }
      if ((jsonObj.get("floorNumber") != null && !jsonObj.get("floorNumber").isJsonNull()) && !jsonObj.get("floorNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `floorNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("floorNumber").toString()));
      }
      if ((jsonObj.get("housingUnit") != null && !jsonObj.get("housingUnit").isJsonNull()) && !jsonObj.get("housingUnit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `housingUnit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("housingUnit").toString()));
      }
      if ((jsonObj.get("postBox") != null && !jsonObj.get("postBox").isJsonNull()) && !jsonObj.get("postBox").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postBox` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postBox").toString()));
      }
      if ((jsonObj.get("postCode") != null && !jsonObj.get("postCode").isJsonNull()) && !jsonObj.get("postCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postCode").toString()));
      }
      if ((jsonObj.get("cityOrPlaceName") != null && !jsonObj.get("cityOrPlaceName").isJsonNull()) && !jsonObj.get("cityOrPlaceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cityOrPlaceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cityOrPlaceName").toString()));
      }
      if ((jsonObj.get("districtName") != null && !jsonObj.get("districtName").isJsonNull()) && !jsonObj.get("districtName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `districtName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("districtName").toString()));
      }
      if ((jsonObj.get("region") != null && !jsonObj.get("region").isJsonNull()) && !jsonObj.get("region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("region").toString()));
      }
      if ((jsonObj.get("countryCode") != null && !jsonObj.get("countryCode").isJsonNull()) && !jsonObj.get("countryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ForeignContactAddressForeignAddress.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ForeignContactAddressForeignAddress' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ForeignContactAddressForeignAddress> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ForeignContactAddressForeignAddress.class));

       return (TypeAdapter<T>) new TypeAdapter<ForeignContactAddressForeignAddress>() {
           @Override
           public void write(JsonWriter out, ForeignContactAddressForeignAddress value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ForeignContactAddressForeignAddress read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ForeignContactAddressForeignAddress given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ForeignContactAddressForeignAddress
  * @throws IOException if the JSON string is invalid with respect to ForeignContactAddressForeignAddress
  */
  public static ForeignContactAddressForeignAddress fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ForeignContactAddressForeignAddress.class);
  }

 /**
  * Convert an instance of ForeignContactAddressForeignAddress to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

