/*
 * Persontjenesten API - ET
 * The Person API provides information on norwegian citizens for the norwegian public health sector, and is maintained by [Norsk helsenett](https://www.nhn.no/).  An API changelog is available [here](../static/changelog/index.html).  For more documentation and a complete integration guide, see the [NHN developer portal](https://utviklerportal.nhn.no/informasjonstjenester/persontjenesten/). 
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;br&gt;KRR: kontaktinformasjon              The Contact information of a person
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-30T07:50:48.244395087Z[Etc/UTC]", comments = "Generator version: 7.7.0-SNAPSHOT")
public class ContactInformationResource {
  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_EMAIL_LAST_UPDATED = "emailLastUpdated";
  @SerializedName(SERIALIZED_NAME_EMAIL_LAST_UPDATED)
  private String emailLastUpdated;

  public static final String SERIALIZED_NAME_EMAIL_LAST_VERIFIED = "emailLastVerified";
  @SerializedName(SERIALIZED_NAME_EMAIL_LAST_VERIFIED)
  private String emailLastVerified;

  public static final String SERIALIZED_NAME_PHONE_NUMBER = "phoneNumber";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  private String phoneNumber;

  public static final String SERIALIZED_NAME_PHONE_NUMBER_LAST_UPDATED = "phoneNumberLastUpdated";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER_LAST_UPDATED)
  private String phoneNumberLastUpdated;

  public static final String SERIALIZED_NAME_PHONE_NUMBER_LAST_VERIFIED = "phoneNumberLastVerified";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER_LAST_VERIFIED)
  private String phoneNumberLastVerified;

  public ContactInformationResource() {
  }

  public ContactInformationResource email(String email) {
    this.email = email;
    return this;
  }

   /**
   * &lt;br&gt;KRR: epostadresse              The Email a person has registered in KRR
   * @return email
  **/
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public ContactInformationResource emailLastUpdated(String emailLastUpdated) {
    this.emailLastUpdated = emailLastUpdated;
    return this;
  }

   /**
   * &lt;br&gt;KRR: epostadresse_oppdatert              Last time The Email was updated by person. New or changed email address. Date can be more than 18 months back in time
   * @return emailLastUpdated
  **/
  @javax.annotation.Nullable
  public String getEmailLastUpdated() {
    return emailLastUpdated;
  }

  public void setEmailLastUpdated(String emailLastUpdated) {
    this.emailLastUpdated = emailLastUpdated;
  }


  public ContactInformationResource emailLastVerified(String emailLastVerified) {
    this.emailLastVerified = emailLastVerified;
    return this;
  }

   /**
   * &lt;br&gt;KRR: epostadresse_sist_verifisert              Last time email was verified by person. Confirmed by person at least twice a year
   * @return emailLastVerified
  **/
  @javax.annotation.Nullable
  public String getEmailLastVerified() {
    return emailLastVerified;
  }

  public void setEmailLastVerified(String emailLastVerified) {
    this.emailLastVerified = emailLastVerified;
  }


  public ContactInformationResource phoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

   /**
   * &lt;br&gt;KRR: mobiltelefonnummer              The Phone number the person has registered in KRR
   * @return phoneNumber
  **/
  @javax.annotation.Nullable
  public String getPhoneNumber() {
    return phoneNumber;
  }

  public void setPhoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
  }


  public ContactInformationResource phoneNumberLastUpdated(String phoneNumberLastUpdated) {
    this.phoneNumberLastUpdated = phoneNumberLastUpdated;
    return this;
  }

   /**
   * &lt;br&gt;KRR: mobiltelefonnummer_oppdatert              Last time The Phone number was updated by person. New or changed phone number. Date can be more than 18 months back in time
   * @return phoneNumberLastUpdated
  **/
  @javax.annotation.Nullable
  public String getPhoneNumberLastUpdated() {
    return phoneNumberLastUpdated;
  }

  public void setPhoneNumberLastUpdated(String phoneNumberLastUpdated) {
    this.phoneNumberLastUpdated = phoneNumberLastUpdated;
  }


  public ContactInformationResource phoneNumberLastVerified(String phoneNumberLastVerified) {
    this.phoneNumberLastVerified = phoneNumberLastVerified;
    return this;
  }

   /**
   * &lt;br&gt;KRR: mobiltelefonnummer_sist_verifisert              Last time the Phone number was verified by person. Confirmed by person at least twice a year
   * @return phoneNumberLastVerified
  **/
  @javax.annotation.Nullable
  public String getPhoneNumberLastVerified() {
    return phoneNumberLastVerified;
  }

  public void setPhoneNumberLastVerified(String phoneNumberLastVerified) {
    this.phoneNumberLastVerified = phoneNumberLastVerified;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContactInformationResource contactInformationResource = (ContactInformationResource) o;
    return Objects.equals(this.email, contactInformationResource.email) &&
        Objects.equals(this.emailLastUpdated, contactInformationResource.emailLastUpdated) &&
        Objects.equals(this.emailLastVerified, contactInformationResource.emailLastVerified) &&
        Objects.equals(this.phoneNumber, contactInformationResource.phoneNumber) &&
        Objects.equals(this.phoneNumberLastUpdated, contactInformationResource.phoneNumberLastUpdated) &&
        Objects.equals(this.phoneNumberLastVerified, contactInformationResource.phoneNumberLastVerified);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(email, emailLastUpdated, emailLastVerified, phoneNumber, phoneNumberLastUpdated, phoneNumberLastVerified);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContactInformationResource {\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    emailLastUpdated: ").append(toIndentedString(emailLastUpdated)).append("\n");
    sb.append("    emailLastVerified: ").append(toIndentedString(emailLastVerified)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    phoneNumberLastUpdated: ").append(toIndentedString(phoneNumberLastUpdated)).append("\n");
    sb.append("    phoneNumberLastVerified: ").append(toIndentedString(phoneNumberLastVerified)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("email");
    openapiFields.add("emailLastUpdated");
    openapiFields.add("emailLastVerified");
    openapiFields.add("phoneNumber");
    openapiFields.add("phoneNumberLastUpdated");
    openapiFields.add("phoneNumberLastVerified");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ContactInformationResource
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContactInformationResource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContactInformationResource is not found in the empty JSON string", ContactInformationResource.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContactInformationResource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContactInformationResource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("emailLastUpdated") != null && !jsonObj.get("emailLastUpdated").isJsonNull()) && !jsonObj.get("emailLastUpdated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailLastUpdated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emailLastUpdated").toString()));
      }
      if ((jsonObj.get("emailLastVerified") != null && !jsonObj.get("emailLastVerified").isJsonNull()) && !jsonObj.get("emailLastVerified").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailLastVerified` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emailLastVerified").toString()));
      }
      if ((jsonObj.get("phoneNumber") != null && !jsonObj.get("phoneNumber").isJsonNull()) && !jsonObj.get("phoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneNumber").toString()));
      }
      if ((jsonObj.get("phoneNumberLastUpdated") != null && !jsonObj.get("phoneNumberLastUpdated").isJsonNull()) && !jsonObj.get("phoneNumberLastUpdated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneNumberLastUpdated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneNumberLastUpdated").toString()));
      }
      if ((jsonObj.get("phoneNumberLastVerified") != null && !jsonObj.get("phoneNumberLastVerified").isJsonNull()) && !jsonObj.get("phoneNumberLastVerified").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneNumberLastVerified` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneNumberLastVerified").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContactInformationResource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContactInformationResource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContactInformationResource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContactInformationResource.class));

       return (TypeAdapter<T>) new TypeAdapter<ContactInformationResource>() {
           @Override
           public void write(JsonWriter out, ContactInformationResource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContactInformationResource read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ContactInformationResource given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ContactInformationResource
  * @throws IOException if the JSON string is invalid with respect to ContactInformationResource
  */
  public static ContactInformationResource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContactInformationResource.class);
  }

 /**
  * Convert an instance of ContactInformationResource to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

