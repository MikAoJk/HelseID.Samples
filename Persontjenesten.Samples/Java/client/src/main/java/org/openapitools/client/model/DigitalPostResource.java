/*
 * Persontjenesten API - ET
 * The Person API provides information on norwegian citizens for the norwegian public health sector, and is maintained by [Norsk helsenett](https://www.nhn.no/).  An API changelog is available [here](../static/changelog/index.html).  For more documentation and a complete integration guide, see the [NHN developer portal](https://utviklerportal.nhn.no/informasjonstjenester/persontjenesten/). 
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;br&gt;KRR: digital_post
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-30T07:50:48.244395087Z[Etc/UTC]", comments = "Generator version: 7.7.0-SNAPSHOT")
public class DigitalPostResource {
  public static final String SERIALIZED_NAME_DIGITAL_POST_ADDRESS = "digitalPostAddress";
  @SerializedName(SERIALIZED_NAME_DIGITAL_POST_ADDRESS)
  private String digitalPostAddress;

  public static final String SERIALIZED_NAME_DIGITAL_POST_VENDOR_ADDRESS = "digitalPostVendorAddress";
  @SerializedName(SERIALIZED_NAME_DIGITAL_POST_VENDOR_ADDRESS)
  private String digitalPostVendorAddress;

  public DigitalPostResource() {
  }

  public DigitalPostResource digitalPostAddress(String digitalPostAddress) {
    this.digitalPostAddress = digitalPostAddress;
    return this;
  }

   /**
   * &lt;br&gt;KRR: postkasseadresse              A unique address for a persons post address with a post vendor
   * @return digitalPostAddress
  **/
  @javax.annotation.Nullable
  public String getDigitalPostAddress() {
    return digitalPostAddress;
  }

  public void setDigitalPostAddress(String digitalPostAddress) {
    this.digitalPostAddress = digitalPostAddress;
  }


  public DigitalPostResource digitalPostVendorAddress(String digitalPostVendorAddress) {
    this.digitalPostVendorAddress = digitalPostVendorAddress;
    return this;
  }

   /**
   * &lt;br&gt;KRR: postkasseleverandoeradresse              org number for a post vendor
   * @return digitalPostVendorAddress
  **/
  @javax.annotation.Nullable
  public String getDigitalPostVendorAddress() {
    return digitalPostVendorAddress;
  }

  public void setDigitalPostVendorAddress(String digitalPostVendorAddress) {
    this.digitalPostVendorAddress = digitalPostVendorAddress;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DigitalPostResource digitalPostResource = (DigitalPostResource) o;
    return Objects.equals(this.digitalPostAddress, digitalPostResource.digitalPostAddress) &&
        Objects.equals(this.digitalPostVendorAddress, digitalPostResource.digitalPostVendorAddress);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(digitalPostAddress, digitalPostVendorAddress);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DigitalPostResource {\n");
    sb.append("    digitalPostAddress: ").append(toIndentedString(digitalPostAddress)).append("\n");
    sb.append("    digitalPostVendorAddress: ").append(toIndentedString(digitalPostVendorAddress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("digitalPostAddress");
    openapiFields.add("digitalPostVendorAddress");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to DigitalPostResource
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DigitalPostResource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DigitalPostResource is not found in the empty JSON string", DigitalPostResource.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DigitalPostResource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DigitalPostResource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("digitalPostAddress") != null && !jsonObj.get("digitalPostAddress").isJsonNull()) && !jsonObj.get("digitalPostAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `digitalPostAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("digitalPostAddress").toString()));
      }
      if ((jsonObj.get("digitalPostVendorAddress") != null && !jsonObj.get("digitalPostVendorAddress").isJsonNull()) && !jsonObj.get("digitalPostVendorAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `digitalPostVendorAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("digitalPostVendorAddress").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DigitalPostResource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DigitalPostResource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DigitalPostResource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DigitalPostResource.class));

       return (TypeAdapter<T>) new TypeAdapter<DigitalPostResource>() {
           @Override
           public void write(JsonWriter out, DigitalPostResource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DigitalPostResource read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DigitalPostResource given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DigitalPostResource
  * @throws IOException if the JSON string is invalid with respect to DigitalPostResource
  */
  public static DigitalPostResource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DigitalPostResource.class);
  }

 /**
  * Convert an instance of DigitalPostResource to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

