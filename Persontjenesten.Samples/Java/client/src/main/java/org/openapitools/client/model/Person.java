/*
 * Persontjenesten API - ET
 * The Person API provides information on norwegian citizens for the norwegian public health sector, and is maintained by [Norsk helsenett](https://www.nhn.no/).  An API changelog is available [here](../static/changelog/index.html).  For more documentation and a complete integration guide, see the [NHN developer portal](https://utviklerportal.nhn.no/informasjonstjenester/persontjenesten/). 
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AddressProtection;
import org.openapitools.client.model.Birth;
import org.openapitools.client.model.BirthInNorway;
import org.openapitools.client.model.Citizenship;
import org.openapitools.client.model.ContactAddress;
import org.openapitools.client.model.DeprivedLegalAuthority;
import org.openapitools.client.model.EmigrationFromNorway;
import org.openapitools.client.model.FamilyRelation;
import org.openapitools.client.model.ForeignContactAddress;
import org.openapitools.client.model.GuardianshipOrFuturePowerOfAttorney;
import org.openapitools.client.model.IdentificationDocument;
import org.openapitools.client.model.IdentityVerification;
import org.openapitools.client.model.ImmigrationToNorway;
import org.openapitools.client.model.LegalAuthority;
import org.openapitools.client.model.MaritalStatus;
import org.openapitools.client.model.NorwegianCitizenshipRetention;
import org.openapitools.client.model.NorwegianIdentificationNumber;
import org.openapitools.client.model.ParentalResponsibility;
import org.openapitools.client.model.PersonCommonContactRegisterInformation;
import org.openapitools.client.model.PersonDeath;
import org.openapitools.client.model.PersonFalseIdentity;
import org.openapitools.client.model.PersonGender;
import org.openapitools.client.model.PersonIdentification;
import org.openapitools.client.model.PersonName;
import org.openapitools.client.model.PersonStatus;
import org.openapitools.client.model.PreferredContactAddress;
import org.openapitools.client.model.PresentAddress;
import org.openapitools.client.model.ResidencePermit;
import org.openapitools.client.model.ResidentialAddress;
import org.openapitools.client.model.ResiduaryEstateContactInformation;
import org.openapitools.client.model.SamiLanguage;
import org.openapitools.client.model.SamiParliamentElectoralRegistry;
import org.openapitools.client.model.SharedResidence;
import org.openapitools.client.model.StayOnSvalbard;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Person
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-30T07:50:48.244395087Z[Etc/UTC]", comments = "Generator version: 7.7.0-SNAPSHOT")
public class Person {
  public static final String SERIALIZED_NAME_FALSE_IDENTITY = "falseIdentity";
  @SerializedName(SERIALIZED_NAME_FALSE_IDENTITY)
  private PersonFalseIdentity falseIdentity;

  public static final String SERIALIZED_NAME_NORWEGIAN_IDENTIFICATION_NUMBER = "norwegianIdentificationNumber";
  @SerializedName(SERIALIZED_NAME_NORWEGIAN_IDENTIFICATION_NUMBER)
  private List<NorwegianIdentificationNumber> norwegianIdentificationNumber;

  public static final String SERIALIZED_NAME_IDENTITY_VERIFICATION = "identityVerification";
  @SerializedName(SERIALIZED_NAME_IDENTITY_VERIFICATION)
  private List<IdentityVerification> identityVerification;

  public static final String SERIALIZED_NAME_RESIDUARY_ESTATE_CONTACT_INFORMATION = "residuaryEstateContactInformation";
  @SerializedName(SERIALIZED_NAME_RESIDUARY_ESTATE_CONTACT_INFORMATION)
  private List<ResiduaryEstateContactInformation> residuaryEstateContactInformation;

  public static final String SERIALIZED_NAME_IDENTIFICATION_DOCUMENT = "identificationDocument";
  @SerializedName(SERIALIZED_NAME_IDENTIFICATION_DOCUMENT)
  private List<IdentificationDocument> identificationDocument;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private List<PersonStatus> status;

  public static final String SERIALIZED_NAME_IMMIGRATION_AUTHORITIES_IDENTIFICATION_NUMBER = "immigrationAuthoritiesIdentificationNumber";
  @SerializedName(SERIALIZED_NAME_IMMIGRATION_AUTHORITIES_IDENTIFICATION_NUMBER)
  private List<PersonIdentification> immigrationAuthoritiesIdentificationNumber;

  public static final String SERIALIZED_NAME_FOREIGN_PERSON_IDENTIFICATION_NUMBER = "foreignPersonIdentificationNumber";
  @SerializedName(SERIALIZED_NAME_FOREIGN_PERSON_IDENTIFICATION_NUMBER)
  private List<PersonIdentification> foreignPersonIdentificationNumber;

  public static final String SERIALIZED_NAME_SHARED_RESIDENCE = "sharedResidence";
  @SerializedName(SERIALIZED_NAME_SHARED_RESIDENCE)
  private List<SharedResidence> sharedResidence;

  public static final String SERIALIZED_NAME_GENDER = "gender";
  @SerializedName(SERIALIZED_NAME_GENDER)
  private List<PersonGender> gender;

  public static final String SERIALIZED_NAME_BIRTH = "birth";
  @SerializedName(SERIALIZED_NAME_BIRTH)
  private List<Birth> birth;

  public static final String SERIALIZED_NAME_BIRTH_IN_NORWAY = "birthInNorway";
  @SerializedName(SERIALIZED_NAME_BIRTH_IN_NORWAY)
  private List<BirthInNorway> birthInNorway;

  public static final String SERIALIZED_NAME_FAMILY_RELATION = "familyRelation";
  @SerializedName(SERIALIZED_NAME_FAMILY_RELATION)
  private List<FamilyRelation> familyRelation;

  public static final String SERIALIZED_NAME_MARITAL_STATUS = "maritalStatus";
  @SerializedName(SERIALIZED_NAME_MARITAL_STATUS)
  private List<MaritalStatus> maritalStatus;

  public static final String SERIALIZED_NAME_DEATH = "death";
  @SerializedName(SERIALIZED_NAME_DEATH)
  private PersonDeath death;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private List<PersonName> name;

  public static final String SERIALIZED_NAME_ADDRESS_PROTECTION = "addressProtection";
  @SerializedName(SERIALIZED_NAME_ADDRESS_PROTECTION)
  private List<AddressProtection> addressProtection;

  public static final String SERIALIZED_NAME_RESIDENTIAL_ADDRESS = "residentialAddress";
  @SerializedName(SERIALIZED_NAME_RESIDENTIAL_ADDRESS)
  private List<ResidentialAddress> residentialAddress;

  public static final String SERIALIZED_NAME_PRESENT_ADDRESS = "presentAddress";
  @SerializedName(SERIALIZED_NAME_PRESENT_ADDRESS)
  private List<PresentAddress> presentAddress;

  public static final String SERIALIZED_NAME_IMMIGRATION_TO_NORWAY = "immigrationToNorway";
  @SerializedName(SERIALIZED_NAME_IMMIGRATION_TO_NORWAY)
  private List<ImmigrationToNorway> immigrationToNorway;

  public static final String SERIALIZED_NAME_EMIGRATION_FROM_NORWAY = "emigrationFromNorway";
  @SerializedName(SERIALIZED_NAME_EMIGRATION_FROM_NORWAY)
  private List<EmigrationFromNorway> emigrationFromNorway;

  public static final String SERIALIZED_NAME_USE_OF_SAMI_LANGUAGE = "useOfSamiLanguage";
  @SerializedName(SERIALIZED_NAME_USE_OF_SAMI_LANGUAGE)
  private List<SamiLanguage> useOfSamiLanguage;

  public static final String SERIALIZED_NAME_SAMI_PARLIAMENT_ELECTORAL_REGISTRY_STATUS = "samiParliamentElectoralRegistryStatus";
  @SerializedName(SERIALIZED_NAME_SAMI_PARLIAMENT_ELECTORAL_REGISTRY_STATUS)
  private List<SamiParliamentElectoralRegistry> samiParliamentElectoralRegistryStatus;

  public static final String SERIALIZED_NAME_PREFERRED_CONTACT_ADDRESS = "preferredContactAddress";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_PREFERRED_CONTACT_ADDRESS)
  private List<PreferredContactAddress> preferredContactAddress;

  public static final String SERIALIZED_NAME_POSTAL_ADDRESS = "postalAddress";
  @SerializedName(SERIALIZED_NAME_POSTAL_ADDRESS)
  private List<ContactAddress> postalAddress;

  public static final String SERIALIZED_NAME_FOREIGN_POSTAL_ADDRESS = "foreignPostalAddress";
  @SerializedName(SERIALIZED_NAME_FOREIGN_POSTAL_ADDRESS)
  private List<ForeignContactAddress> foreignPostalAddress;

  public static final String SERIALIZED_NAME_PARENTAL_RESPONSIBILITY = "parentalResponsibility";
  @SerializedName(SERIALIZED_NAME_PARENTAL_RESPONSIBILITY)
  private List<ParentalResponsibility> parentalResponsibility;

  public static final String SERIALIZED_NAME_CITIZENSHIP = "citizenship";
  @SerializedName(SERIALIZED_NAME_CITIZENSHIP)
  private List<Citizenship> citizenship;

  public static final String SERIALIZED_NAME_CITIZENSHIP_RETENTION = "citizenshipRetention";
  @SerializedName(SERIALIZED_NAME_CITIZENSHIP_RETENTION)
  private List<NorwegianCitizenshipRetention> citizenshipRetention;

  public static final String SERIALIZED_NAME_RESIDENCE_PERMIT = "residencePermit";
  @SerializedName(SERIALIZED_NAME_RESIDENCE_PERMIT)
  private List<ResidencePermit> residencePermit;

  public static final String SERIALIZED_NAME_STAY_ON_SVALBARD = "stayOnSvalbard";
  @SerializedName(SERIALIZED_NAME_STAY_ON_SVALBARD)
  private List<StayOnSvalbard> stayOnSvalbard;

  public static final String SERIALIZED_NAME_GUARDIANSHIP_OR_FUTURE_POWER_OF_ATTORNEY = "guardianshipOrFuturePowerOfAttorney";
  @SerializedName(SERIALIZED_NAME_GUARDIANSHIP_OR_FUTURE_POWER_OF_ATTORNEY)
  private List<GuardianshipOrFuturePowerOfAttorney> guardianshipOrFuturePowerOfAttorney;

  public static final String SERIALIZED_NAME_DEPRIVED_LEGAL_AUTHORITY = "deprivedLegalAuthority";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_DEPRIVED_LEGAL_AUTHORITY)
  private List<DeprivedLegalAuthority> deprivedLegalAuthority;

  public static final String SERIALIZED_NAME_LEGAL_AUTHORITY = "legalAuthority";
  @SerializedName(SERIALIZED_NAME_LEGAL_AUTHORITY)
  private List<LegalAuthority> legalAuthority;

  public static final String SERIALIZED_NAME_COMMON_CONTACT_REGISTER_INFORMATION = "commonContactRegisterInformation";
  @SerializedName(SERIALIZED_NAME_COMMON_CONTACT_REGISTER_INFORMATION)
  private PersonCommonContactRegisterInformation commonContactRegisterInformation;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_SEQUENCE_NUMBER = "sequenceNumber";
  @SerializedName(SERIALIZED_NAME_SEQUENCE_NUMBER)
  private Long sequenceNumber;

  public Person() {
  }

  public Person falseIdentity(PersonFalseIdentity falseIdentity) {
    this.falseIdentity = falseIdentity;
    return this;
  }

   /**
   * Get falseIdentity
   * @return falseIdentity
  **/
  @javax.annotation.Nullable
  public PersonFalseIdentity getFalseIdentity() {
    return falseIdentity;
  }

  public void setFalseIdentity(PersonFalseIdentity falseIdentity) {
    this.falseIdentity = falseIdentity;
  }


  public Person norwegianIdentificationNumber(List<NorwegianIdentificationNumber> norwegianIdentificationNumber) {
    this.norwegianIdentificationNumber = norwegianIdentificationNumber;
    return this;
  }

  public Person addNorwegianIdentificationNumberItem(NorwegianIdentificationNumber norwegianIdentificationNumberItem) {
    if (this.norwegianIdentificationNumber == null) {
      this.norwegianIdentificationNumber = new ArrayList<>();
    }
    this.norwegianIdentificationNumber.add(norwegianIdentificationNumberItem);
    return this;
  }

   /**
   * &lt;br&gt;FREG: Identifikasjonsnummer
   * @return norwegianIdentificationNumber
  **/
  @javax.annotation.Nullable
  public List<NorwegianIdentificationNumber> getNorwegianIdentificationNumber() {
    return norwegianIdentificationNumber;
  }

  public void setNorwegianIdentificationNumber(List<NorwegianIdentificationNumber> norwegianIdentificationNumber) {
    this.norwegianIdentificationNumber = norwegianIdentificationNumber;
  }


  public Person identityVerification(List<IdentityVerification> identityVerification) {
    this.identityVerification = identityVerification;
    return this;
  }

  public Person addIdentityVerificationItem(IdentityVerification identityVerificationItem) {
    if (this.identityVerification == null) {
      this.identityVerification = new ArrayList<>();
    }
    this.identityVerification.add(identityVerificationItem);
    return this;
  }

   /**
   * If empty, is the same as IdentityVerificationStatus.None&lt;br&gt;FREG: Identitetsgrunnlag
   * @return identityVerification
  **/
  @javax.annotation.Nullable
  public List<IdentityVerification> getIdentityVerification() {
    return identityVerification;
  }

  public void setIdentityVerification(List<IdentityVerification> identityVerification) {
    this.identityVerification = identityVerification;
  }


  public Person residuaryEstateContactInformation(List<ResiduaryEstateContactInformation> residuaryEstateContactInformation) {
    this.residuaryEstateContactInformation = residuaryEstateContactInformation;
    return this;
  }

  public Person addResiduaryEstateContactInformationItem(ResiduaryEstateContactInformation residuaryEstateContactInformationItem) {
    if (this.residuaryEstateContactInformation == null) {
      this.residuaryEstateContactInformation = new ArrayList<>();
    }
    this.residuaryEstateContactInformation.add(residuaryEstateContactInformationItem);
    return this;
  }

   /**
   * &lt;br&gt;FREG: KontaktinformasjonForDoedsbo
   * @return residuaryEstateContactInformation
  **/
  @javax.annotation.Nullable
  public List<ResiduaryEstateContactInformation> getResiduaryEstateContactInformation() {
    return residuaryEstateContactInformation;
  }

  public void setResiduaryEstateContactInformation(List<ResiduaryEstateContactInformation> residuaryEstateContactInformation) {
    this.residuaryEstateContactInformation = residuaryEstateContactInformation;
  }


  public Person identificationDocument(List<IdentificationDocument> identificationDocument) {
    this.identificationDocument = identificationDocument;
    return this;
  }

  public Person addIdentificationDocumentItem(IdentificationDocument identificationDocumentItem) {
    if (this.identificationDocument == null) {
      this.identificationDocument = new ArrayList<>();
    }
    this.identificationDocument.add(identificationDocumentItem);
    return this;
  }

   /**
   * &lt;br&gt;FREG: Legitimasjonsdokument
   * @return identificationDocument
  **/
  @javax.annotation.Nullable
  public List<IdentificationDocument> getIdentificationDocument() {
    return identificationDocument;
  }

  public void setIdentificationDocument(List<IdentificationDocument> identificationDocument) {
    this.identificationDocument = identificationDocument;
  }


  public Person status(List<PersonStatus> status) {
    this.status = status;
    return this;
  }

  public Person addStatusItem(PersonStatus statusItem) {
    if (this.status == null) {
      this.status = new ArrayList<>();
    }
    this.status.add(statusItem);
    return this;
  }

   /**
   * &lt;br&gt;FREG: Status
   * @return status
  **/
  @javax.annotation.Nullable
  public List<PersonStatus> getStatus() {
    return status;
  }

  public void setStatus(List<PersonStatus> status) {
    this.status = status;
  }


  public Person immigrationAuthoritiesIdentificationNumber(List<PersonIdentification> immigrationAuthoritiesIdentificationNumber) {
    this.immigrationAuthoritiesIdentificationNumber = immigrationAuthoritiesIdentificationNumber;
    return this;
  }

  public Person addImmigrationAuthoritiesIdentificationNumberItem(PersonIdentification immigrationAuthoritiesIdentificationNumberItem) {
    if (this.immigrationAuthoritiesIdentificationNumber == null) {
      this.immigrationAuthoritiesIdentificationNumber = new ArrayList<>();
    }
    this.immigrationAuthoritiesIdentificationNumber.add(immigrationAuthoritiesIdentificationNumberItem);
    return this;
  }

   /**
   * &lt;br&gt;FREG: UtlendingsmyndighetenesIdentifikasjonsnummer
   * @return immigrationAuthoritiesIdentificationNumber
  **/
  @javax.annotation.Nullable
  public List<PersonIdentification> getImmigrationAuthoritiesIdentificationNumber() {
    return immigrationAuthoritiesIdentificationNumber;
  }

  public void setImmigrationAuthoritiesIdentificationNumber(List<PersonIdentification> immigrationAuthoritiesIdentificationNumber) {
    this.immigrationAuthoritiesIdentificationNumber = immigrationAuthoritiesIdentificationNumber;
  }


  public Person foreignPersonIdentificationNumber(List<PersonIdentification> foreignPersonIdentificationNumber) {
    this.foreignPersonIdentificationNumber = foreignPersonIdentificationNumber;
    return this;
  }

  public Person addForeignPersonIdentificationNumberItem(PersonIdentification foreignPersonIdentificationNumberItem) {
    if (this.foreignPersonIdentificationNumber == null) {
      this.foreignPersonIdentificationNumber = new ArrayList<>();
    }
    this.foreignPersonIdentificationNumber.add(foreignPersonIdentificationNumberItem);
    return this;
  }

   /**
   * &lt;br&gt;FREG: UtenlandskPersonidentifikasjon
   * @return foreignPersonIdentificationNumber
  **/
  @javax.annotation.Nullable
  public List<PersonIdentification> getForeignPersonIdentificationNumber() {
    return foreignPersonIdentificationNumber;
  }

  public void setForeignPersonIdentificationNumber(List<PersonIdentification> foreignPersonIdentificationNumber) {
    this.foreignPersonIdentificationNumber = foreignPersonIdentificationNumber;
  }


  public Person sharedResidence(List<SharedResidence> sharedResidence) {
    this.sharedResidence = sharedResidence;
    return this;
  }

  public Person addSharedResidenceItem(SharedResidence sharedResidenceItem) {
    if (this.sharedResidence == null) {
      this.sharedResidence = new ArrayList<>();
    }
    this.sharedResidence.add(sharedResidenceItem);
    return this;
  }

   /**
   * List may only contain 0 or 1 element  &lt;br&gt;FREG: DeltBosted
   * @return sharedResidence
  **/
  @javax.annotation.Nullable
  public List<SharedResidence> getSharedResidence() {
    return sharedResidence;
  }

  public void setSharedResidence(List<SharedResidence> sharedResidence) {
    this.sharedResidence = sharedResidence;
  }


  public Person gender(List<PersonGender> gender) {
    this.gender = gender;
    return this;
  }

  public Person addGenderItem(PersonGender genderItem) {
    if (this.gender == null) {
      this.gender = new ArrayList<>();
    }
    this.gender.add(genderItem);
    return this;
  }

   /**
   * &lt;br&gt;FREG: Kjoenn
   * @return gender
  **/
  @javax.annotation.Nullable
  public List<PersonGender> getGender() {
    return gender;
  }

  public void setGender(List<PersonGender> gender) {
    this.gender = gender;
  }


  public Person birth(List<Birth> birth) {
    this.birth = birth;
    return this;
  }

  public Person addBirthItem(Birth birthItem) {
    if (this.birth == null) {
      this.birth = new ArrayList<>();
    }
    this.birth.add(birthItem);
    return this;
  }

   /**
   * &lt;br&gt;FREG: Foedsel
   * @return birth
  **/
  @javax.annotation.Nullable
  public List<Birth> getBirth() {
    return birth;
  }

  public void setBirth(List<Birth> birth) {
    this.birth = birth;
  }


  public Person birthInNorway(List<BirthInNorway> birthInNorway) {
    this.birthInNorway = birthInNorway;
    return this;
  }

  public Person addBirthInNorwayItem(BirthInNorway birthInNorwayItem) {
    if (this.birthInNorway == null) {
      this.birthInNorway = new ArrayList<>();
    }
    this.birthInNorway.add(birthInNorwayItem);
    return this;
  }

   /**
   * &lt;br&gt;FREG: FoedselINorge
   * @return birthInNorway
  **/
  @javax.annotation.Nullable
  public List<BirthInNorway> getBirthInNorway() {
    return birthInNorway;
  }

  public void setBirthInNorway(List<BirthInNorway> birthInNorway) {
    this.birthInNorway = birthInNorway;
  }


  public Person familyRelation(List<FamilyRelation> familyRelation) {
    this.familyRelation = familyRelation;
    return this;
  }

  public Person addFamilyRelationItem(FamilyRelation familyRelationItem) {
    if (this.familyRelation == null) {
      this.familyRelation = new ArrayList<>();
    }
    this.familyRelation.add(familyRelationItem);
    return this;
  }

   /**
   * &lt;br&gt;FREG: Familierelasjon
   * @return familyRelation
  **/
  @javax.annotation.Nullable
  public List<FamilyRelation> getFamilyRelation() {
    return familyRelation;
  }

  public void setFamilyRelation(List<FamilyRelation> familyRelation) {
    this.familyRelation = familyRelation;
  }


  public Person maritalStatus(List<MaritalStatus> maritalStatus) {
    this.maritalStatus = maritalStatus;
    return this;
  }

  public Person addMaritalStatusItem(MaritalStatus maritalStatusItem) {
    if (this.maritalStatus == null) {
      this.maritalStatus = new ArrayList<>();
    }
    this.maritalStatus.add(maritalStatusItem);
    return this;
  }

   /**
   * &lt;br&gt;FREG: Sivilstand
   * @return maritalStatus
  **/
  @javax.annotation.Nullable
  public List<MaritalStatus> getMaritalStatus() {
    return maritalStatus;
  }

  public void setMaritalStatus(List<MaritalStatus> maritalStatus) {
    this.maritalStatus = maritalStatus;
  }


  public Person death(PersonDeath death) {
    this.death = death;
    return this;
  }

   /**
   * Get death
   * @return death
  **/
  @javax.annotation.Nullable
  public PersonDeath getDeath() {
    return death;
  }

  public void setDeath(PersonDeath death) {
    this.death = death;
  }


  public Person name(List<PersonName> name) {
    this.name = name;
    return this;
  }

  public Person addNameItem(PersonName nameItem) {
    if (this.name == null) {
      this.name = new ArrayList<>();
    }
    this.name.add(nameItem);
    return this;
  }

   /**
   * &lt;br&gt;FREG: Navn
   * @return name
  **/
  @javax.annotation.Nullable
  public List<PersonName> getName() {
    return name;
  }

  public void setName(List<PersonName> name) {
    this.name = name;
  }


  public Person addressProtection(List<AddressProtection> addressProtection) {
    this.addressProtection = addressProtection;
    return this;
  }

  public Person addAddressProtectionItem(AddressProtection addressProtectionItem) {
    if (this.addressProtection == null) {
      this.addressProtection = new ArrayList<>();
    }
    this.addressProtection.add(addressProtectionItem);
    return this;
  }

   /**
   * &lt;br&gt;FREG: Adressebeskyttelse
   * @return addressProtection
  **/
  @javax.annotation.Nullable
  public List<AddressProtection> getAddressProtection() {
    return addressProtection;
  }

  public void setAddressProtection(List<AddressProtection> addressProtection) {
    this.addressProtection = addressProtection;
  }


  public Person residentialAddress(List<ResidentialAddress> residentialAddress) {
    this.residentialAddress = residentialAddress;
    return this;
  }

  public Person addResidentialAddressItem(ResidentialAddress residentialAddressItem) {
    if (this.residentialAddress == null) {
      this.residentialAddress = new ArrayList<>();
    }
    this.residentialAddress.add(residentialAddressItem);
    return this;
  }

   /**
   * &lt;br&gt;FREG: Bostedsadresse
   * @return residentialAddress
  **/
  @javax.annotation.Nullable
  public List<ResidentialAddress> getResidentialAddress() {
    return residentialAddress;
  }

  public void setResidentialAddress(List<ResidentialAddress> residentialAddress) {
    this.residentialAddress = residentialAddress;
  }


  public Person presentAddress(List<PresentAddress> presentAddress) {
    this.presentAddress = presentAddress;
    return this;
  }

  public Person addPresentAddressItem(PresentAddress presentAddressItem) {
    if (this.presentAddress == null) {
      this.presentAddress = new ArrayList<>();
    }
    this.presentAddress.add(presentAddressItem);
    return this;
  }

   /**
   * &lt;br&gt;FREG: Oppholdsadresse
   * @return presentAddress
  **/
  @javax.annotation.Nullable
  public List<PresentAddress> getPresentAddress() {
    return presentAddress;
  }

  public void setPresentAddress(List<PresentAddress> presentAddress) {
    this.presentAddress = presentAddress;
  }


  public Person immigrationToNorway(List<ImmigrationToNorway> immigrationToNorway) {
    this.immigrationToNorway = immigrationToNorway;
    return this;
  }

  public Person addImmigrationToNorwayItem(ImmigrationToNorway immigrationToNorwayItem) {
    if (this.immigrationToNorway == null) {
      this.immigrationToNorway = new ArrayList<>();
    }
    this.immigrationToNorway.add(immigrationToNorwayItem);
    return this;
  }

   /**
   * &lt;br&gt;FREG: Innflytting
   * @return immigrationToNorway
  **/
  @javax.annotation.Nullable
  public List<ImmigrationToNorway> getImmigrationToNorway() {
    return immigrationToNorway;
  }

  public void setImmigrationToNorway(List<ImmigrationToNorway> immigrationToNorway) {
    this.immigrationToNorway = immigrationToNorway;
  }


  public Person emigrationFromNorway(List<EmigrationFromNorway> emigrationFromNorway) {
    this.emigrationFromNorway = emigrationFromNorway;
    return this;
  }

  public Person addEmigrationFromNorwayItem(EmigrationFromNorway emigrationFromNorwayItem) {
    if (this.emigrationFromNorway == null) {
      this.emigrationFromNorway = new ArrayList<>();
    }
    this.emigrationFromNorway.add(emigrationFromNorwayItem);
    return this;
  }

   /**
   * &lt;br&gt;FREG: Utflytting
   * @return emigrationFromNorway
  **/
  @javax.annotation.Nullable
  public List<EmigrationFromNorway> getEmigrationFromNorway() {
    return emigrationFromNorway;
  }

  public void setEmigrationFromNorway(List<EmigrationFromNorway> emigrationFromNorway) {
    this.emigrationFromNorway = emigrationFromNorway;
  }


  public Person useOfSamiLanguage(List<SamiLanguage> useOfSamiLanguage) {
    this.useOfSamiLanguage = useOfSamiLanguage;
    return this;
  }

  public Person addUseOfSamiLanguageItem(SamiLanguage useOfSamiLanguageItem) {
    if (this.useOfSamiLanguage == null) {
      this.useOfSamiLanguage = new ArrayList<>();
    }
    this.useOfSamiLanguage.add(useOfSamiLanguageItem);
    return this;
  }

   /**
   * &lt;br&gt;FREG: BrukAvSamiskSpraak
   * @return useOfSamiLanguage
  **/
  @javax.annotation.Nullable
  public List<SamiLanguage> getUseOfSamiLanguage() {
    return useOfSamiLanguage;
  }

  public void setUseOfSamiLanguage(List<SamiLanguage> useOfSamiLanguage) {
    this.useOfSamiLanguage = useOfSamiLanguage;
  }


  public Person samiParliamentElectoralRegistryStatus(List<SamiParliamentElectoralRegistry> samiParliamentElectoralRegistryStatus) {
    this.samiParliamentElectoralRegistryStatus = samiParliamentElectoralRegistryStatus;
    return this;
  }

  public Person addSamiParliamentElectoralRegistryStatusItem(SamiParliamentElectoralRegistry samiParliamentElectoralRegistryStatusItem) {
    if (this.samiParliamentElectoralRegistryStatus == null) {
      this.samiParliamentElectoralRegistryStatus = new ArrayList<>();
    }
    this.samiParliamentElectoralRegistryStatus.add(samiParliamentElectoralRegistryStatusItem);
    return this;
  }

   /**
   * &lt;br&gt;FREG: ForholdTilSametingetsValgmanntall
   * @return samiParliamentElectoralRegistryStatus
  **/
  @javax.annotation.Nullable
  public List<SamiParliamentElectoralRegistry> getSamiParliamentElectoralRegistryStatus() {
    return samiParliamentElectoralRegistryStatus;
  }

  public void setSamiParliamentElectoralRegistryStatus(List<SamiParliamentElectoralRegistry> samiParliamentElectoralRegistryStatus) {
    this.samiParliamentElectoralRegistryStatus = samiParliamentElectoralRegistryStatus;
  }


  @Deprecated
  public Person preferredContactAddress(List<PreferredContactAddress> preferredContactAddress) {
    this.preferredContactAddress = preferredContactAddress;
    return this;
  }

  public Person addPreferredContactAddressItem(PreferredContactAddress preferredContactAddressItem) {
    if (this.preferredContactAddress == null) {
      this.preferredContactAddress = new ArrayList<>();
    }
    this.preferredContactAddress.add(preferredContactAddressItem);
    return this;
  }

   /**
   * Will be removed with deprecation of API v1.0  &lt;br&gt;FREG: PreferertKontaktadresse
   * @return preferredContactAddress
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nullable
  public List<PreferredContactAddress> getPreferredContactAddress() {
    return preferredContactAddress;
  }

  @Deprecated
  public void setPreferredContactAddress(List<PreferredContactAddress> preferredContactAddress) {
    this.preferredContactAddress = preferredContactAddress;
  }


  public Person postalAddress(List<ContactAddress> postalAddress) {
    this.postalAddress = postalAddress;
    return this;
  }

  public Person addPostalAddressItem(ContactAddress postalAddressItem) {
    if (this.postalAddress == null) {
      this.postalAddress = new ArrayList<>();
    }
    this.postalAddress.add(postalAddressItem);
    return this;
  }

   /**
   * &lt;br&gt;FREG: Postadresse
   * @return postalAddress
  **/
  @javax.annotation.Nullable
  public List<ContactAddress> getPostalAddress() {
    return postalAddress;
  }

  public void setPostalAddress(List<ContactAddress> postalAddress) {
    this.postalAddress = postalAddress;
  }


  public Person foreignPostalAddress(List<ForeignContactAddress> foreignPostalAddress) {
    this.foreignPostalAddress = foreignPostalAddress;
    return this;
  }

  public Person addForeignPostalAddressItem(ForeignContactAddress foreignPostalAddressItem) {
    if (this.foreignPostalAddress == null) {
      this.foreignPostalAddress = new ArrayList<>();
    }
    this.foreignPostalAddress.add(foreignPostalAddressItem);
    return this;
  }

   /**
   * &lt;br&gt;FREG: PostadresseIUtlandet
   * @return foreignPostalAddress
  **/
  @javax.annotation.Nullable
  public List<ForeignContactAddress> getForeignPostalAddress() {
    return foreignPostalAddress;
  }

  public void setForeignPostalAddress(List<ForeignContactAddress> foreignPostalAddress) {
    this.foreignPostalAddress = foreignPostalAddress;
  }


  public Person parentalResponsibility(List<ParentalResponsibility> parentalResponsibility) {
    this.parentalResponsibility = parentalResponsibility;
    return this;
  }

  public Person addParentalResponsibilityItem(ParentalResponsibility parentalResponsibilityItem) {
    if (this.parentalResponsibility == null) {
      this.parentalResponsibility = new ArrayList<>();
    }
    this.parentalResponsibility.add(parentalResponsibilityItem);
    return this;
  }

   /**
   * &lt;br&gt;FREG: Foreldreansvar
   * @return parentalResponsibility
  **/
  @javax.annotation.Nullable
  public List<ParentalResponsibility> getParentalResponsibility() {
    return parentalResponsibility;
  }

  public void setParentalResponsibility(List<ParentalResponsibility> parentalResponsibility) {
    this.parentalResponsibility = parentalResponsibility;
  }


  public Person citizenship(List<Citizenship> citizenship) {
    this.citizenship = citizenship;
    return this;
  }

  public Person addCitizenshipItem(Citizenship citizenshipItem) {
    if (this.citizenship == null) {
      this.citizenship = new ArrayList<>();
    }
    this.citizenship.add(citizenshipItem);
    return this;
  }

   /**
   * &lt;br&gt;FREG: Statsborgerskap
   * @return citizenship
  **/
  @javax.annotation.Nullable
  public List<Citizenship> getCitizenship() {
    return citizenship;
  }

  public void setCitizenship(List<Citizenship> citizenship) {
    this.citizenship = citizenship;
  }


  public Person citizenshipRetention(List<NorwegianCitizenshipRetention> citizenshipRetention) {
    this.citizenshipRetention = citizenshipRetention;
    return this;
  }

  public Person addCitizenshipRetentionItem(NorwegianCitizenshipRetention citizenshipRetentionItem) {
    if (this.citizenshipRetention == null) {
      this.citizenshipRetention = new ArrayList<>();
    }
    this.citizenshipRetention.add(citizenshipRetentionItem);
    return this;
  }

   /**
   * &lt;br&gt;FREG: Bibehold
   * @return citizenshipRetention
  **/
  @javax.annotation.Nullable
  public List<NorwegianCitizenshipRetention> getCitizenshipRetention() {
    return citizenshipRetention;
  }

  public void setCitizenshipRetention(List<NorwegianCitizenshipRetention> citizenshipRetention) {
    this.citizenshipRetention = citizenshipRetention;
  }


  public Person residencePermit(List<ResidencePermit> residencePermit) {
    this.residencePermit = residencePermit;
    return this;
  }

  public Person addResidencePermitItem(ResidencePermit residencePermitItem) {
    if (this.residencePermit == null) {
      this.residencePermit = new ArrayList<>();
    }
    this.residencePermit.add(residencePermitItem);
    return this;
  }

   /**
   * &lt;br&gt;FREG: Opphold
   * @return residencePermit
  **/
  @javax.annotation.Nullable
  public List<ResidencePermit> getResidencePermit() {
    return residencePermit;
  }

  public void setResidencePermit(List<ResidencePermit> residencePermit) {
    this.residencePermit = residencePermit;
  }


  public Person stayOnSvalbard(List<StayOnSvalbard> stayOnSvalbard) {
    this.stayOnSvalbard = stayOnSvalbard;
    return this;
  }

  public Person addStayOnSvalbardItem(StayOnSvalbard stayOnSvalbardItem) {
    if (this.stayOnSvalbard == null) {
      this.stayOnSvalbard = new ArrayList<>();
    }
    this.stayOnSvalbard.add(stayOnSvalbardItem);
    return this;
  }

   /**
   * &lt;br&gt;FREG: OppholdPaaSvalbard
   * @return stayOnSvalbard
  **/
  @javax.annotation.Nullable
  public List<StayOnSvalbard> getStayOnSvalbard() {
    return stayOnSvalbard;
  }

  public void setStayOnSvalbard(List<StayOnSvalbard> stayOnSvalbard) {
    this.stayOnSvalbard = stayOnSvalbard;
  }


  public Person guardianshipOrFuturePowerOfAttorney(List<GuardianshipOrFuturePowerOfAttorney> guardianshipOrFuturePowerOfAttorney) {
    this.guardianshipOrFuturePowerOfAttorney = guardianshipOrFuturePowerOfAttorney;
    return this;
  }

  public Person addGuardianshipOrFuturePowerOfAttorneyItem(GuardianshipOrFuturePowerOfAttorney guardianshipOrFuturePowerOfAttorneyItem) {
    if (this.guardianshipOrFuturePowerOfAttorney == null) {
      this.guardianshipOrFuturePowerOfAttorney = new ArrayList<>();
    }
    this.guardianshipOrFuturePowerOfAttorney.add(guardianshipOrFuturePowerOfAttorneyItem);
    return this;
  }

   /**
   * &lt;br&gt;FREG: VergemaalEllerFremtidsfullmakt
   * @return guardianshipOrFuturePowerOfAttorney
  **/
  @javax.annotation.Nullable
  public List<GuardianshipOrFuturePowerOfAttorney> getGuardianshipOrFuturePowerOfAttorney() {
    return guardianshipOrFuturePowerOfAttorney;
  }

  public void setGuardianshipOrFuturePowerOfAttorney(List<GuardianshipOrFuturePowerOfAttorney> guardianshipOrFuturePowerOfAttorney) {
    this.guardianshipOrFuturePowerOfAttorney = guardianshipOrFuturePowerOfAttorney;
  }


  @Deprecated
  public Person deprivedLegalAuthority(List<DeprivedLegalAuthority> deprivedLegalAuthority) {
    this.deprivedLegalAuthority = deprivedLegalAuthority;
    return this;
  }

  public Person addDeprivedLegalAuthorityItem(DeprivedLegalAuthority deprivedLegalAuthorityItem) {
    if (this.deprivedLegalAuthority == null) {
      this.deprivedLegalAuthority = new ArrayList<>();
    }
    this.deprivedLegalAuthority.add(deprivedLegalAuthorityItem);
    return this;
  }

   /**
   * &lt;br&gt;FREG: FratattRettsligHandleevne 
   * @return deprivedLegalAuthority
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nullable
  public List<DeprivedLegalAuthority> getDeprivedLegalAuthority() {
    return deprivedLegalAuthority;
  }

  @Deprecated
  public void setDeprivedLegalAuthority(List<DeprivedLegalAuthority> deprivedLegalAuthority) {
    this.deprivedLegalAuthority = deprivedLegalAuthority;
  }


  public Person legalAuthority(List<LegalAuthority> legalAuthority) {
    this.legalAuthority = legalAuthority;
    return this;
  }

  public Person addLegalAuthorityItem(LegalAuthority legalAuthorityItem) {
    if (this.legalAuthority == null) {
      this.legalAuthority = new ArrayList<>();
    }
    this.legalAuthority.add(legalAuthorityItem);
    return this;
  }

   /**
   * &lt;br&gt;FREG: RettsligHandleevne 
   * @return legalAuthority
  **/
  @javax.annotation.Nullable
  public List<LegalAuthority> getLegalAuthority() {
    return legalAuthority;
  }

  public void setLegalAuthority(List<LegalAuthority> legalAuthority) {
    this.legalAuthority = legalAuthority;
  }


  public Person commonContactRegisterInformation(PersonCommonContactRegisterInformation commonContactRegisterInformation) {
    this.commonContactRegisterInformation = commonContactRegisterInformation;
    return this;
  }

   /**
   * Get commonContactRegisterInformation
   * @return commonContactRegisterInformation
  **/
  @javax.annotation.Nullable
  public PersonCommonContactRegisterInformation getCommonContactRegisterInformation() {
    return commonContactRegisterInformation;
  }

  public void setCommonContactRegisterInformation(PersonCommonContactRegisterInformation commonContactRegisterInformation) {
    this.commonContactRegisterInformation = commonContactRegisterInformation;
  }


  public Person id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Person sequenceNumber(Long sequenceNumber) {
    this.sequenceNumber = sequenceNumber;
    return this;
  }

   /**
   * Get sequenceNumber
   * @return sequenceNumber
  **/
  @javax.annotation.Nullable
  public Long getSequenceNumber() {
    return sequenceNumber;
  }

  public void setSequenceNumber(Long sequenceNumber) {
    this.sequenceNumber = sequenceNumber;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Person person = (Person) o;
    return Objects.equals(this.falseIdentity, person.falseIdentity) &&
        Objects.equals(this.norwegianIdentificationNumber, person.norwegianIdentificationNumber) &&
        Objects.equals(this.identityVerification, person.identityVerification) &&
        Objects.equals(this.residuaryEstateContactInformation, person.residuaryEstateContactInformation) &&
        Objects.equals(this.identificationDocument, person.identificationDocument) &&
        Objects.equals(this.status, person.status) &&
        Objects.equals(this.immigrationAuthoritiesIdentificationNumber, person.immigrationAuthoritiesIdentificationNumber) &&
        Objects.equals(this.foreignPersonIdentificationNumber, person.foreignPersonIdentificationNumber) &&
        Objects.equals(this.sharedResidence, person.sharedResidence) &&
        Objects.equals(this.gender, person.gender) &&
        Objects.equals(this.birth, person.birth) &&
        Objects.equals(this.birthInNorway, person.birthInNorway) &&
        Objects.equals(this.familyRelation, person.familyRelation) &&
        Objects.equals(this.maritalStatus, person.maritalStatus) &&
        Objects.equals(this.death, person.death) &&
        Objects.equals(this.name, person.name) &&
        Objects.equals(this.addressProtection, person.addressProtection) &&
        Objects.equals(this.residentialAddress, person.residentialAddress) &&
        Objects.equals(this.presentAddress, person.presentAddress) &&
        Objects.equals(this.immigrationToNorway, person.immigrationToNorway) &&
        Objects.equals(this.emigrationFromNorway, person.emigrationFromNorway) &&
        Objects.equals(this.useOfSamiLanguage, person.useOfSamiLanguage) &&
        Objects.equals(this.samiParliamentElectoralRegistryStatus, person.samiParliamentElectoralRegistryStatus) &&
        Objects.equals(this.preferredContactAddress, person.preferredContactAddress) &&
        Objects.equals(this.postalAddress, person.postalAddress) &&
        Objects.equals(this.foreignPostalAddress, person.foreignPostalAddress) &&
        Objects.equals(this.parentalResponsibility, person.parentalResponsibility) &&
        Objects.equals(this.citizenship, person.citizenship) &&
        Objects.equals(this.citizenshipRetention, person.citizenshipRetention) &&
        Objects.equals(this.residencePermit, person.residencePermit) &&
        Objects.equals(this.stayOnSvalbard, person.stayOnSvalbard) &&
        Objects.equals(this.guardianshipOrFuturePowerOfAttorney, person.guardianshipOrFuturePowerOfAttorney) &&
        Objects.equals(this.deprivedLegalAuthority, person.deprivedLegalAuthority) &&
        Objects.equals(this.legalAuthority, person.legalAuthority) &&
        Objects.equals(this.commonContactRegisterInformation, person.commonContactRegisterInformation) &&
        Objects.equals(this.id, person.id) &&
        Objects.equals(this.sequenceNumber, person.sequenceNumber);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(falseIdentity, norwegianIdentificationNumber, identityVerification, residuaryEstateContactInformation, identificationDocument, status, immigrationAuthoritiesIdentificationNumber, foreignPersonIdentificationNumber, sharedResidence, gender, birth, birthInNorway, familyRelation, maritalStatus, death, name, addressProtection, residentialAddress, presentAddress, immigrationToNorway, emigrationFromNorway, useOfSamiLanguage, samiParliamentElectoralRegistryStatus, preferredContactAddress, postalAddress, foreignPostalAddress, parentalResponsibility, citizenship, citizenshipRetention, residencePermit, stayOnSvalbard, guardianshipOrFuturePowerOfAttorney, deprivedLegalAuthority, legalAuthority, commonContactRegisterInformation, id, sequenceNumber);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Person {\n");
    sb.append("    falseIdentity: ").append(toIndentedString(falseIdentity)).append("\n");
    sb.append("    norwegianIdentificationNumber: ").append(toIndentedString(norwegianIdentificationNumber)).append("\n");
    sb.append("    identityVerification: ").append(toIndentedString(identityVerification)).append("\n");
    sb.append("    residuaryEstateContactInformation: ").append(toIndentedString(residuaryEstateContactInformation)).append("\n");
    sb.append("    identificationDocument: ").append(toIndentedString(identificationDocument)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    immigrationAuthoritiesIdentificationNumber: ").append(toIndentedString(immigrationAuthoritiesIdentificationNumber)).append("\n");
    sb.append("    foreignPersonIdentificationNumber: ").append(toIndentedString(foreignPersonIdentificationNumber)).append("\n");
    sb.append("    sharedResidence: ").append(toIndentedString(sharedResidence)).append("\n");
    sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
    sb.append("    birth: ").append(toIndentedString(birth)).append("\n");
    sb.append("    birthInNorway: ").append(toIndentedString(birthInNorway)).append("\n");
    sb.append("    familyRelation: ").append(toIndentedString(familyRelation)).append("\n");
    sb.append("    maritalStatus: ").append(toIndentedString(maritalStatus)).append("\n");
    sb.append("    death: ").append(toIndentedString(death)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    addressProtection: ").append(toIndentedString(addressProtection)).append("\n");
    sb.append("    residentialAddress: ").append(toIndentedString(residentialAddress)).append("\n");
    sb.append("    presentAddress: ").append(toIndentedString(presentAddress)).append("\n");
    sb.append("    immigrationToNorway: ").append(toIndentedString(immigrationToNorway)).append("\n");
    sb.append("    emigrationFromNorway: ").append(toIndentedString(emigrationFromNorway)).append("\n");
    sb.append("    useOfSamiLanguage: ").append(toIndentedString(useOfSamiLanguage)).append("\n");
    sb.append("    samiParliamentElectoralRegistryStatus: ").append(toIndentedString(samiParliamentElectoralRegistryStatus)).append("\n");
    sb.append("    preferredContactAddress: ").append(toIndentedString(preferredContactAddress)).append("\n");
    sb.append("    postalAddress: ").append(toIndentedString(postalAddress)).append("\n");
    sb.append("    foreignPostalAddress: ").append(toIndentedString(foreignPostalAddress)).append("\n");
    sb.append("    parentalResponsibility: ").append(toIndentedString(parentalResponsibility)).append("\n");
    sb.append("    citizenship: ").append(toIndentedString(citizenship)).append("\n");
    sb.append("    citizenshipRetention: ").append(toIndentedString(citizenshipRetention)).append("\n");
    sb.append("    residencePermit: ").append(toIndentedString(residencePermit)).append("\n");
    sb.append("    stayOnSvalbard: ").append(toIndentedString(stayOnSvalbard)).append("\n");
    sb.append("    guardianshipOrFuturePowerOfAttorney: ").append(toIndentedString(guardianshipOrFuturePowerOfAttorney)).append("\n");
    sb.append("    deprivedLegalAuthority: ").append(toIndentedString(deprivedLegalAuthority)).append("\n");
    sb.append("    legalAuthority: ").append(toIndentedString(legalAuthority)).append("\n");
    sb.append("    commonContactRegisterInformation: ").append(toIndentedString(commonContactRegisterInformation)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    sequenceNumber: ").append(toIndentedString(sequenceNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("falseIdentity");
    openapiFields.add("norwegianIdentificationNumber");
    openapiFields.add("identityVerification");
    openapiFields.add("residuaryEstateContactInformation");
    openapiFields.add("identificationDocument");
    openapiFields.add("status");
    openapiFields.add("immigrationAuthoritiesIdentificationNumber");
    openapiFields.add("foreignPersonIdentificationNumber");
    openapiFields.add("sharedResidence");
    openapiFields.add("gender");
    openapiFields.add("birth");
    openapiFields.add("birthInNorway");
    openapiFields.add("familyRelation");
    openapiFields.add("maritalStatus");
    openapiFields.add("death");
    openapiFields.add("name");
    openapiFields.add("addressProtection");
    openapiFields.add("residentialAddress");
    openapiFields.add("presentAddress");
    openapiFields.add("immigrationToNorway");
    openapiFields.add("emigrationFromNorway");
    openapiFields.add("useOfSamiLanguage");
    openapiFields.add("samiParliamentElectoralRegistryStatus");
    openapiFields.add("preferredContactAddress");
    openapiFields.add("postalAddress");
    openapiFields.add("foreignPostalAddress");
    openapiFields.add("parentalResponsibility");
    openapiFields.add("citizenship");
    openapiFields.add("citizenshipRetention");
    openapiFields.add("residencePermit");
    openapiFields.add("stayOnSvalbard");
    openapiFields.add("guardianshipOrFuturePowerOfAttorney");
    openapiFields.add("deprivedLegalAuthority");
    openapiFields.add("legalAuthority");
    openapiFields.add("commonContactRegisterInformation");
    openapiFields.add("id");
    openapiFields.add("sequenceNumber");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Person
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Person.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Person is not found in the empty JSON string", Person.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Person.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Person` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `falseIdentity`
      if (jsonObj.get("falseIdentity") != null && !jsonObj.get("falseIdentity").isJsonNull()) {
        PersonFalseIdentity.validateJsonElement(jsonObj.get("falseIdentity"));
      }
      if (jsonObj.get("norwegianIdentificationNumber") != null && !jsonObj.get("norwegianIdentificationNumber").isJsonNull()) {
        JsonArray jsonArraynorwegianIdentificationNumber = jsonObj.getAsJsonArray("norwegianIdentificationNumber");
        if (jsonArraynorwegianIdentificationNumber != null) {
          // ensure the json data is an array
          if (!jsonObj.get("norwegianIdentificationNumber").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `norwegianIdentificationNumber` to be an array in the JSON string but got `%s`", jsonObj.get("norwegianIdentificationNumber").toString()));
          }

          // validate the optional field `norwegianIdentificationNumber` (array)
          for (int i = 0; i < jsonArraynorwegianIdentificationNumber.size(); i++) {
            NorwegianIdentificationNumber.validateJsonElement(jsonArraynorwegianIdentificationNumber.get(i));
          };
        }
      }
      if (jsonObj.get("identityVerification") != null && !jsonObj.get("identityVerification").isJsonNull()) {
        JsonArray jsonArrayidentityVerification = jsonObj.getAsJsonArray("identityVerification");
        if (jsonArrayidentityVerification != null) {
          // ensure the json data is an array
          if (!jsonObj.get("identityVerification").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `identityVerification` to be an array in the JSON string but got `%s`", jsonObj.get("identityVerification").toString()));
          }

          // validate the optional field `identityVerification` (array)
          for (int i = 0; i < jsonArrayidentityVerification.size(); i++) {
            IdentityVerification.validateJsonElement(jsonArrayidentityVerification.get(i));
          };
        }
      }
      if (jsonObj.get("residuaryEstateContactInformation") != null && !jsonObj.get("residuaryEstateContactInformation").isJsonNull()) {
        JsonArray jsonArrayresiduaryEstateContactInformation = jsonObj.getAsJsonArray("residuaryEstateContactInformation");
        if (jsonArrayresiduaryEstateContactInformation != null) {
          // ensure the json data is an array
          if (!jsonObj.get("residuaryEstateContactInformation").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `residuaryEstateContactInformation` to be an array in the JSON string but got `%s`", jsonObj.get("residuaryEstateContactInformation").toString()));
          }

          // validate the optional field `residuaryEstateContactInformation` (array)
          for (int i = 0; i < jsonArrayresiduaryEstateContactInformation.size(); i++) {
            ResiduaryEstateContactInformation.validateJsonElement(jsonArrayresiduaryEstateContactInformation.get(i));
          };
        }
      }
      if (jsonObj.get("identificationDocument") != null && !jsonObj.get("identificationDocument").isJsonNull()) {
        JsonArray jsonArrayidentificationDocument = jsonObj.getAsJsonArray("identificationDocument");
        if (jsonArrayidentificationDocument != null) {
          // ensure the json data is an array
          if (!jsonObj.get("identificationDocument").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `identificationDocument` to be an array in the JSON string but got `%s`", jsonObj.get("identificationDocument").toString()));
          }

          // validate the optional field `identificationDocument` (array)
          for (int i = 0; i < jsonArrayidentificationDocument.size(); i++) {
            IdentificationDocument.validateJsonElement(jsonArrayidentificationDocument.get(i));
          };
        }
      }
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        JsonArray jsonArraystatus = jsonObj.getAsJsonArray("status");
        if (jsonArraystatus != null) {
          // ensure the json data is an array
          if (!jsonObj.get("status").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `status` to be an array in the JSON string but got `%s`", jsonObj.get("status").toString()));
          }

          // validate the optional field `status` (array)
          for (int i = 0; i < jsonArraystatus.size(); i++) {
            PersonStatus.validateJsonElement(jsonArraystatus.get(i));
          };
        }
      }
      if (jsonObj.get("immigrationAuthoritiesIdentificationNumber") != null && !jsonObj.get("immigrationAuthoritiesIdentificationNumber").isJsonNull()) {
        JsonArray jsonArrayimmigrationAuthoritiesIdentificationNumber = jsonObj.getAsJsonArray("immigrationAuthoritiesIdentificationNumber");
        if (jsonArrayimmigrationAuthoritiesIdentificationNumber != null) {
          // ensure the json data is an array
          if (!jsonObj.get("immigrationAuthoritiesIdentificationNumber").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `immigrationAuthoritiesIdentificationNumber` to be an array in the JSON string but got `%s`", jsonObj.get("immigrationAuthoritiesIdentificationNumber").toString()));
          }

          // validate the optional field `immigrationAuthoritiesIdentificationNumber` (array)
          for (int i = 0; i < jsonArrayimmigrationAuthoritiesIdentificationNumber.size(); i++) {
            PersonIdentification.validateJsonElement(jsonArrayimmigrationAuthoritiesIdentificationNumber.get(i));
          };
        }
      }
      if (jsonObj.get("foreignPersonIdentificationNumber") != null && !jsonObj.get("foreignPersonIdentificationNumber").isJsonNull()) {
        JsonArray jsonArrayforeignPersonIdentificationNumber = jsonObj.getAsJsonArray("foreignPersonIdentificationNumber");
        if (jsonArrayforeignPersonIdentificationNumber != null) {
          // ensure the json data is an array
          if (!jsonObj.get("foreignPersonIdentificationNumber").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `foreignPersonIdentificationNumber` to be an array in the JSON string but got `%s`", jsonObj.get("foreignPersonIdentificationNumber").toString()));
          }

          // validate the optional field `foreignPersonIdentificationNumber` (array)
          for (int i = 0; i < jsonArrayforeignPersonIdentificationNumber.size(); i++) {
            PersonIdentification.validateJsonElement(jsonArrayforeignPersonIdentificationNumber.get(i));
          };
        }
      }
      if (jsonObj.get("sharedResidence") != null && !jsonObj.get("sharedResidence").isJsonNull()) {
        JsonArray jsonArraysharedResidence = jsonObj.getAsJsonArray("sharedResidence");
        if (jsonArraysharedResidence != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sharedResidence").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sharedResidence` to be an array in the JSON string but got `%s`", jsonObj.get("sharedResidence").toString()));
          }

          // validate the optional field `sharedResidence` (array)
          for (int i = 0; i < jsonArraysharedResidence.size(); i++) {
            SharedResidence.validateJsonElement(jsonArraysharedResidence.get(i));
          };
        }
      }
      if (jsonObj.get("gender") != null && !jsonObj.get("gender").isJsonNull()) {
        JsonArray jsonArraygender = jsonObj.getAsJsonArray("gender");
        if (jsonArraygender != null) {
          // ensure the json data is an array
          if (!jsonObj.get("gender").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `gender` to be an array in the JSON string but got `%s`", jsonObj.get("gender").toString()));
          }

          // validate the optional field `gender` (array)
          for (int i = 0; i < jsonArraygender.size(); i++) {
            PersonGender.validateJsonElement(jsonArraygender.get(i));
          };
        }
      }
      if (jsonObj.get("birth") != null && !jsonObj.get("birth").isJsonNull()) {
        JsonArray jsonArraybirth = jsonObj.getAsJsonArray("birth");
        if (jsonArraybirth != null) {
          // ensure the json data is an array
          if (!jsonObj.get("birth").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `birth` to be an array in the JSON string but got `%s`", jsonObj.get("birth").toString()));
          }

          // validate the optional field `birth` (array)
          for (int i = 0; i < jsonArraybirth.size(); i++) {
            Birth.validateJsonElement(jsonArraybirth.get(i));
          };
        }
      }
      if (jsonObj.get("birthInNorway") != null && !jsonObj.get("birthInNorway").isJsonNull()) {
        JsonArray jsonArraybirthInNorway = jsonObj.getAsJsonArray("birthInNorway");
        if (jsonArraybirthInNorway != null) {
          // ensure the json data is an array
          if (!jsonObj.get("birthInNorway").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `birthInNorway` to be an array in the JSON string but got `%s`", jsonObj.get("birthInNorway").toString()));
          }

          // validate the optional field `birthInNorway` (array)
          for (int i = 0; i < jsonArraybirthInNorway.size(); i++) {
            BirthInNorway.validateJsonElement(jsonArraybirthInNorway.get(i));
          };
        }
      }
      if (jsonObj.get("familyRelation") != null && !jsonObj.get("familyRelation").isJsonNull()) {
        JsonArray jsonArrayfamilyRelation = jsonObj.getAsJsonArray("familyRelation");
        if (jsonArrayfamilyRelation != null) {
          // ensure the json data is an array
          if (!jsonObj.get("familyRelation").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `familyRelation` to be an array in the JSON string but got `%s`", jsonObj.get("familyRelation").toString()));
          }

          // validate the optional field `familyRelation` (array)
          for (int i = 0; i < jsonArrayfamilyRelation.size(); i++) {
            FamilyRelation.validateJsonElement(jsonArrayfamilyRelation.get(i));
          };
        }
      }
      if (jsonObj.get("maritalStatus") != null && !jsonObj.get("maritalStatus").isJsonNull()) {
        JsonArray jsonArraymaritalStatus = jsonObj.getAsJsonArray("maritalStatus");
        if (jsonArraymaritalStatus != null) {
          // ensure the json data is an array
          if (!jsonObj.get("maritalStatus").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `maritalStatus` to be an array in the JSON string but got `%s`", jsonObj.get("maritalStatus").toString()));
          }

          // validate the optional field `maritalStatus` (array)
          for (int i = 0; i < jsonArraymaritalStatus.size(); i++) {
            MaritalStatus.validateJsonElement(jsonArraymaritalStatus.get(i));
          };
        }
      }
      // validate the optional field `death`
      if (jsonObj.get("death") != null && !jsonObj.get("death").isJsonNull()) {
        PersonDeath.validateJsonElement(jsonObj.get("death"));
      }
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        JsonArray jsonArrayname = jsonObj.getAsJsonArray("name");
        if (jsonArrayname != null) {
          // ensure the json data is an array
          if (!jsonObj.get("name").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `name` to be an array in the JSON string but got `%s`", jsonObj.get("name").toString()));
          }

          // validate the optional field `name` (array)
          for (int i = 0; i < jsonArrayname.size(); i++) {
            PersonName.validateJsonElement(jsonArrayname.get(i));
          };
        }
      }
      if (jsonObj.get("addressProtection") != null && !jsonObj.get("addressProtection").isJsonNull()) {
        JsonArray jsonArrayaddressProtection = jsonObj.getAsJsonArray("addressProtection");
        if (jsonArrayaddressProtection != null) {
          // ensure the json data is an array
          if (!jsonObj.get("addressProtection").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `addressProtection` to be an array in the JSON string but got `%s`", jsonObj.get("addressProtection").toString()));
          }

          // validate the optional field `addressProtection` (array)
          for (int i = 0; i < jsonArrayaddressProtection.size(); i++) {
            AddressProtection.validateJsonElement(jsonArrayaddressProtection.get(i));
          };
        }
      }
      if (jsonObj.get("residentialAddress") != null && !jsonObj.get("residentialAddress").isJsonNull()) {
        JsonArray jsonArrayresidentialAddress = jsonObj.getAsJsonArray("residentialAddress");
        if (jsonArrayresidentialAddress != null) {
          // ensure the json data is an array
          if (!jsonObj.get("residentialAddress").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `residentialAddress` to be an array in the JSON string but got `%s`", jsonObj.get("residentialAddress").toString()));
          }

          // validate the optional field `residentialAddress` (array)
          for (int i = 0; i < jsonArrayresidentialAddress.size(); i++) {
            ResidentialAddress.validateJsonElement(jsonArrayresidentialAddress.get(i));
          };
        }
      }
      if (jsonObj.get("presentAddress") != null && !jsonObj.get("presentAddress").isJsonNull()) {
        JsonArray jsonArraypresentAddress = jsonObj.getAsJsonArray("presentAddress");
        if (jsonArraypresentAddress != null) {
          // ensure the json data is an array
          if (!jsonObj.get("presentAddress").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `presentAddress` to be an array in the JSON string but got `%s`", jsonObj.get("presentAddress").toString()));
          }

          // validate the optional field `presentAddress` (array)
          for (int i = 0; i < jsonArraypresentAddress.size(); i++) {
            PresentAddress.validateJsonElement(jsonArraypresentAddress.get(i));
          };
        }
      }
      if (jsonObj.get("immigrationToNorway") != null && !jsonObj.get("immigrationToNorway").isJsonNull()) {
        JsonArray jsonArrayimmigrationToNorway = jsonObj.getAsJsonArray("immigrationToNorway");
        if (jsonArrayimmigrationToNorway != null) {
          // ensure the json data is an array
          if (!jsonObj.get("immigrationToNorway").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `immigrationToNorway` to be an array in the JSON string but got `%s`", jsonObj.get("immigrationToNorway").toString()));
          }

          // validate the optional field `immigrationToNorway` (array)
          for (int i = 0; i < jsonArrayimmigrationToNorway.size(); i++) {
            ImmigrationToNorway.validateJsonElement(jsonArrayimmigrationToNorway.get(i));
          };
        }
      }
      if (jsonObj.get("emigrationFromNorway") != null && !jsonObj.get("emigrationFromNorway").isJsonNull()) {
        JsonArray jsonArrayemigrationFromNorway = jsonObj.getAsJsonArray("emigrationFromNorway");
        if (jsonArrayemigrationFromNorway != null) {
          // ensure the json data is an array
          if (!jsonObj.get("emigrationFromNorway").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `emigrationFromNorway` to be an array in the JSON string but got `%s`", jsonObj.get("emigrationFromNorway").toString()));
          }

          // validate the optional field `emigrationFromNorway` (array)
          for (int i = 0; i < jsonArrayemigrationFromNorway.size(); i++) {
            EmigrationFromNorway.validateJsonElement(jsonArrayemigrationFromNorway.get(i));
          };
        }
      }
      if (jsonObj.get("useOfSamiLanguage") != null && !jsonObj.get("useOfSamiLanguage").isJsonNull()) {
        JsonArray jsonArrayuseOfSamiLanguage = jsonObj.getAsJsonArray("useOfSamiLanguage");
        if (jsonArrayuseOfSamiLanguage != null) {
          // ensure the json data is an array
          if (!jsonObj.get("useOfSamiLanguage").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `useOfSamiLanguage` to be an array in the JSON string but got `%s`", jsonObj.get("useOfSamiLanguage").toString()));
          }

          // validate the optional field `useOfSamiLanguage` (array)
          for (int i = 0; i < jsonArrayuseOfSamiLanguage.size(); i++) {
            SamiLanguage.validateJsonElement(jsonArrayuseOfSamiLanguage.get(i));
          };
        }
      }
      if (jsonObj.get("samiParliamentElectoralRegistryStatus") != null && !jsonObj.get("samiParliamentElectoralRegistryStatus").isJsonNull()) {
        JsonArray jsonArraysamiParliamentElectoralRegistryStatus = jsonObj.getAsJsonArray("samiParliamentElectoralRegistryStatus");
        if (jsonArraysamiParliamentElectoralRegistryStatus != null) {
          // ensure the json data is an array
          if (!jsonObj.get("samiParliamentElectoralRegistryStatus").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `samiParliamentElectoralRegistryStatus` to be an array in the JSON string but got `%s`", jsonObj.get("samiParliamentElectoralRegistryStatus").toString()));
          }

          // validate the optional field `samiParliamentElectoralRegistryStatus` (array)
          for (int i = 0; i < jsonArraysamiParliamentElectoralRegistryStatus.size(); i++) {
            SamiParliamentElectoralRegistry.validateJsonElement(jsonArraysamiParliamentElectoralRegistryStatus.get(i));
          };
        }
      }
      if (jsonObj.get("preferredContactAddress") != null && !jsonObj.get("preferredContactAddress").isJsonNull()) {
        JsonArray jsonArraypreferredContactAddress = jsonObj.getAsJsonArray("preferredContactAddress");
        if (jsonArraypreferredContactAddress != null) {
          // ensure the json data is an array
          if (!jsonObj.get("preferredContactAddress").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `preferredContactAddress` to be an array in the JSON string but got `%s`", jsonObj.get("preferredContactAddress").toString()));
          }

          // validate the optional field `preferredContactAddress` (array)
          for (int i = 0; i < jsonArraypreferredContactAddress.size(); i++) {
            PreferredContactAddress.validateJsonElement(jsonArraypreferredContactAddress.get(i));
          };
        }
      }
      if (jsonObj.get("postalAddress") != null && !jsonObj.get("postalAddress").isJsonNull()) {
        JsonArray jsonArraypostalAddress = jsonObj.getAsJsonArray("postalAddress");
        if (jsonArraypostalAddress != null) {
          // ensure the json data is an array
          if (!jsonObj.get("postalAddress").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `postalAddress` to be an array in the JSON string but got `%s`", jsonObj.get("postalAddress").toString()));
          }

          // validate the optional field `postalAddress` (array)
          for (int i = 0; i < jsonArraypostalAddress.size(); i++) {
            ContactAddress.validateJsonElement(jsonArraypostalAddress.get(i));
          };
        }
      }
      if (jsonObj.get("foreignPostalAddress") != null && !jsonObj.get("foreignPostalAddress").isJsonNull()) {
        JsonArray jsonArrayforeignPostalAddress = jsonObj.getAsJsonArray("foreignPostalAddress");
        if (jsonArrayforeignPostalAddress != null) {
          // ensure the json data is an array
          if (!jsonObj.get("foreignPostalAddress").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `foreignPostalAddress` to be an array in the JSON string but got `%s`", jsonObj.get("foreignPostalAddress").toString()));
          }

          // validate the optional field `foreignPostalAddress` (array)
          for (int i = 0; i < jsonArrayforeignPostalAddress.size(); i++) {
            ForeignContactAddress.validateJsonElement(jsonArrayforeignPostalAddress.get(i));
          };
        }
      }
      if (jsonObj.get("parentalResponsibility") != null && !jsonObj.get("parentalResponsibility").isJsonNull()) {
        JsonArray jsonArrayparentalResponsibility = jsonObj.getAsJsonArray("parentalResponsibility");
        if (jsonArrayparentalResponsibility != null) {
          // ensure the json data is an array
          if (!jsonObj.get("parentalResponsibility").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `parentalResponsibility` to be an array in the JSON string but got `%s`", jsonObj.get("parentalResponsibility").toString()));
          }

          // validate the optional field `parentalResponsibility` (array)
          for (int i = 0; i < jsonArrayparentalResponsibility.size(); i++) {
            ParentalResponsibility.validateJsonElement(jsonArrayparentalResponsibility.get(i));
          };
        }
      }
      if (jsonObj.get("citizenship") != null && !jsonObj.get("citizenship").isJsonNull()) {
        JsonArray jsonArraycitizenship = jsonObj.getAsJsonArray("citizenship");
        if (jsonArraycitizenship != null) {
          // ensure the json data is an array
          if (!jsonObj.get("citizenship").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `citizenship` to be an array in the JSON string but got `%s`", jsonObj.get("citizenship").toString()));
          }

          // validate the optional field `citizenship` (array)
          for (int i = 0; i < jsonArraycitizenship.size(); i++) {
            Citizenship.validateJsonElement(jsonArraycitizenship.get(i));
          };
        }
      }
      if (jsonObj.get("citizenshipRetention") != null && !jsonObj.get("citizenshipRetention").isJsonNull()) {
        JsonArray jsonArraycitizenshipRetention = jsonObj.getAsJsonArray("citizenshipRetention");
        if (jsonArraycitizenshipRetention != null) {
          // ensure the json data is an array
          if (!jsonObj.get("citizenshipRetention").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `citizenshipRetention` to be an array in the JSON string but got `%s`", jsonObj.get("citizenshipRetention").toString()));
          }

          // validate the optional field `citizenshipRetention` (array)
          for (int i = 0; i < jsonArraycitizenshipRetention.size(); i++) {
            NorwegianCitizenshipRetention.validateJsonElement(jsonArraycitizenshipRetention.get(i));
          };
        }
      }
      if (jsonObj.get("residencePermit") != null && !jsonObj.get("residencePermit").isJsonNull()) {
        JsonArray jsonArrayresidencePermit = jsonObj.getAsJsonArray("residencePermit");
        if (jsonArrayresidencePermit != null) {
          // ensure the json data is an array
          if (!jsonObj.get("residencePermit").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `residencePermit` to be an array in the JSON string but got `%s`", jsonObj.get("residencePermit").toString()));
          }

          // validate the optional field `residencePermit` (array)
          for (int i = 0; i < jsonArrayresidencePermit.size(); i++) {
            ResidencePermit.validateJsonElement(jsonArrayresidencePermit.get(i));
          };
        }
      }
      if (jsonObj.get("stayOnSvalbard") != null && !jsonObj.get("stayOnSvalbard").isJsonNull()) {
        JsonArray jsonArraystayOnSvalbard = jsonObj.getAsJsonArray("stayOnSvalbard");
        if (jsonArraystayOnSvalbard != null) {
          // ensure the json data is an array
          if (!jsonObj.get("stayOnSvalbard").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `stayOnSvalbard` to be an array in the JSON string but got `%s`", jsonObj.get("stayOnSvalbard").toString()));
          }

          // validate the optional field `stayOnSvalbard` (array)
          for (int i = 0; i < jsonArraystayOnSvalbard.size(); i++) {
            StayOnSvalbard.validateJsonElement(jsonArraystayOnSvalbard.get(i));
          };
        }
      }
      if (jsonObj.get("guardianshipOrFuturePowerOfAttorney") != null && !jsonObj.get("guardianshipOrFuturePowerOfAttorney").isJsonNull()) {
        JsonArray jsonArrayguardianshipOrFuturePowerOfAttorney = jsonObj.getAsJsonArray("guardianshipOrFuturePowerOfAttorney");
        if (jsonArrayguardianshipOrFuturePowerOfAttorney != null) {
          // ensure the json data is an array
          if (!jsonObj.get("guardianshipOrFuturePowerOfAttorney").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `guardianshipOrFuturePowerOfAttorney` to be an array in the JSON string but got `%s`", jsonObj.get("guardianshipOrFuturePowerOfAttorney").toString()));
          }

          // validate the optional field `guardianshipOrFuturePowerOfAttorney` (array)
          for (int i = 0; i < jsonArrayguardianshipOrFuturePowerOfAttorney.size(); i++) {
            GuardianshipOrFuturePowerOfAttorney.validateJsonElement(jsonArrayguardianshipOrFuturePowerOfAttorney.get(i));
          };
        }
      }
      if (jsonObj.get("deprivedLegalAuthority") != null && !jsonObj.get("deprivedLegalAuthority").isJsonNull()) {
        JsonArray jsonArraydeprivedLegalAuthority = jsonObj.getAsJsonArray("deprivedLegalAuthority");
        if (jsonArraydeprivedLegalAuthority != null) {
          // ensure the json data is an array
          if (!jsonObj.get("deprivedLegalAuthority").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `deprivedLegalAuthority` to be an array in the JSON string but got `%s`", jsonObj.get("deprivedLegalAuthority").toString()));
          }

          // validate the optional field `deprivedLegalAuthority` (array)
          for (int i = 0; i < jsonArraydeprivedLegalAuthority.size(); i++) {
            DeprivedLegalAuthority.validateJsonElement(jsonArraydeprivedLegalAuthority.get(i));
          };
        }
      }
      if (jsonObj.get("legalAuthority") != null && !jsonObj.get("legalAuthority").isJsonNull()) {
        JsonArray jsonArraylegalAuthority = jsonObj.getAsJsonArray("legalAuthority");
        if (jsonArraylegalAuthority != null) {
          // ensure the json data is an array
          if (!jsonObj.get("legalAuthority").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `legalAuthority` to be an array in the JSON string but got `%s`", jsonObj.get("legalAuthority").toString()));
          }

          // validate the optional field `legalAuthority` (array)
          for (int i = 0; i < jsonArraylegalAuthority.size(); i++) {
            LegalAuthority.validateJsonElement(jsonArraylegalAuthority.get(i));
          };
        }
      }
      // validate the optional field `commonContactRegisterInformation`
      if (jsonObj.get("commonContactRegisterInformation") != null && !jsonObj.get("commonContactRegisterInformation").isJsonNull()) {
        PersonCommonContactRegisterInformation.validateJsonElement(jsonObj.get("commonContactRegisterInformation"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Person.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Person' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Person> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Person.class));

       return (TypeAdapter<T>) new TypeAdapter<Person>() {
           @Override
           public void write(JsonWriter out, Person value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Person read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Person given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Person
  * @throws IOException if the JSON string is invalid with respect to Person
  */
  public static Person fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Person.class);
  }

 /**
  * Convert an instance of Person to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

